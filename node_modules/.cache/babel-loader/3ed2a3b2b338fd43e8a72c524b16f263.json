{"ast":null,"code":"import Config from \"./config.json\";\n\nclass PieceCard {\n  constructor() {\n    this.canvas = document.createElement('canvas');\n    this.ctx = this.canvas.getContext('2d');\n    this.canvas.width = Config.card.width;\n    this.canvas.height = Config.card.height;\n  }\n\n  drawCanvas(actions, pieceImage, owner, isKing, seed) {\n    const actionsSize = Config.card.actionsSize;\n    const actionsOffsetX = Config.card.actionsOffsetX;\n    const actionsOffsetY = Config.card.actionsOffsetY;\n    var ctx = this.ctx;\n\n    if (actions !== undefined) {\n      console.log(actions);\n      ctx.canvas.width = Config.card.width;\n      ctx.canvas.height = Config.card.height;\n      ctx.drawImage(pieceImage, 32, 10); // draw actions\n\n      var actionLegend = [];\n\n      for (var i = 0; i < actions.length; i++) {\n        for (var j = 0; j < actions[0].length; j++) {\n          if (actions[i][j] !== \"-\") {\n            var offsetY;\n\n            if (owner === \"P1\") {\n              offsetY = actionsOffsetY + (actions[0].length - 1 - j) * actionsSize;\n            } else {\n              offsetY = actionsOffsetY + j * actionsSize;\n            }\n\n            if (!actionLegend.includes(actions[i][j]) && actions[i][j] !== \"P\") {\n              actionLegend.push(actions[i][j]);\n            }\n\n            ctx.fillStyle = this.actionData(actions[i][j]).color;\n            ctx.fillRect(actionsOffsetX + i * actionsSize, offsetY, actionsSize, actionsSize);\n          }\n        }\n      }\n\n      ctx.lineWidth = 0.5;\n      ctx.strokeStyle = \"#AAAAAA\";\n\n      for (i = 0; i < actions.length + 1; i++) {\n        //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + actions.length + 1 * actionsSize);\n        //console.log(i);\n        ctx.beginPath();\n        ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n        ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + actions.length * actionsSize);\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n        ctx.lineTo(actionsOffsetX + actions.length * actionsSize, actionsOffsetY + i * actionsSize);\n        ctx.stroke();\n      }\n\n      if (isKing) {\n        ctx.font = \"20px Arial\";\n        ctx.fillStyle = \"#111111\";\n        ctx.fillText(\"â™”\", this.canvas.width - 20, 37);\n      }\n    }\n\n    ctx.fillStyle = '#000000';\n    ctx.font = \"10px Arial\"; // ctx.fillText(\"seed: \" + seed, actionsOffsetX, actionsOffsetY + actions.length * actionsSize + 1.3 * actionsSize);\n    //console.log(actionLegend);\n    // Legend\n\n    for (i = 0; i < actionLegend.length; i++) {\n      ctx.fillStyle = this.actionData(actionLegend[i]).color; //console.log(actionLegend[i]);\n\n      ctx.fillRect(actionsOffsetX, actionsOffsetY + actions.length * actionsSize + (i + 1) * 2 * actionsSize, actionsSize, actionsSize);\n      ctx.font = \"10px Arial\";\n      ctx.fillText(this.actionData(actionLegend[i]).text, actionsOffsetX + actionsSize * 2, actionsOffsetY + actions.length * actionsSize + (i + 1) * 2 * actionsSize + actionsSize);\n    }\n  }\n\n  actionData(str) {\n    return Config.actions[str];\n  }\n\n  drawPieceCard(actions, pieceImage, owner, isKing, seed) {\n    this.drawCanvas(actions, pieceImage, owner, isKing, seed);\n    return this.canvas;\n  }\n\n}\n\nexport default PieceCard;","map":{"version":3,"sources":["/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/src/game/piece-card.jsx"],"names":["Config","PieceCard","constructor","canvas","document","createElement","ctx","getContext","width","card","height","drawCanvas","actions","pieceImage","owner","isKing","seed","actionsSize","actionsOffsetX","actionsOffsetY","undefined","console","log","drawImage","actionLegend","i","length","j","offsetY","includes","push","fillStyle","actionData","color","fillRect","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","font","fillText","text","str","drawPieceCard"],"mappings":"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","sourcesContent":["import Config from \"./config.json\";\n\nclass PieceCard {\n\n    constructor() {\n        this.canvas = document.createElement('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.canvas.width = Config.card.width;\n        this.canvas.height = Config.card.height;\n    }\n\n    drawCanvas(actions, pieceImage, owner, isKing, seed) {\n        const actionsSize = Config.card.actionsSize;\n        const actionsOffsetX = Config.card.actionsOffsetX;\n        const actionsOffsetY = Config.card.actionsOffsetY;\n        var ctx = this.ctx;\n\n        if (actions !== undefined) {\n            console.log(actions);\n            ctx.canvas.width = Config.card.width;\n            ctx.canvas.height = Config.card.height;\n\n            ctx.drawImage(pieceImage, 32, 10);\n\n            // draw actions\n\n            var actionLegend = [];\n\n            for (var i = 0; i < actions.length; i++) {\n                for (var j = 0; j < actions[0].length; j++) {\n                    if (actions[i][j] !== \"-\") {\n                        var offsetY;\n                        if (owner === \"P1\") {\n                            offsetY = actionsOffsetY + (actions[0].length - 1 - j) * actionsSize;\n                        } else {\n                            offsetY = actionsOffsetY + j * actionsSize\n                        }\n                        if (!actionLegend.includes(actions[i][j]) && actions[i][j] !== \"P\") {\n                            actionLegend.push(actions[i][j]);\n                        }\n                        ctx.fillStyle = this.actionData(actions[i][j]).color;\n                        ctx.fillRect(actionsOffsetX + i * actionsSize, offsetY, actionsSize, actionsSize);\n                    }\n                }\n            }\n\n\n            ctx.lineWidth = 0.5;\n            ctx.strokeStyle = \"#AAAAAA\";\n            for (i = 0; i < actions.length + 1; i++) {\n                //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + actions.length + 1 * actionsSize);\n                //console.log(i);\n\n                ctx.beginPath();\n                ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n                ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + (actions.length) * actionsSize);\n                ctx.stroke();\n\n                ctx.beginPath();\n                ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n                ctx.lineTo(actionsOffsetX + (actions.length) * actionsSize, actionsOffsetY + i * actionsSize);\n                ctx.stroke();\n            }\n\n            if (isKing) {\n                ctx.font = \"20px Arial\";\n                ctx.fillStyle = \"#111111\";\n                ctx.fillText(\"â™”\", this.canvas.width - 20, 37);\n            }\n        }\n        ctx.fillStyle = '#000000';\n        ctx.font = \"10px Arial\";\n        // ctx.fillText(\"seed: \" + seed, actionsOffsetX, actionsOffsetY + actions.length * actionsSize + 1.3 * actionsSize);\n\n        //console.log(actionLegend);\n        // Legend\n        for (i = 0; i < actionLegend.length; i++) {\n            ctx.fillStyle = this.actionData(actionLegend[i]).color;\n            //console.log(actionLegend[i]);\n            ctx.fillRect(actionsOffsetX, actionsOffsetY + actions.length * actionsSize + (i + 1) * 2 * actionsSize, actionsSize, actionsSize);\n            ctx.font = \"10px Arial\";\n            ctx.fillText(this.actionData(actionLegend[i]).text, actionsOffsetX + actionsSize * 2, actionsOffsetY + actions.length * actionsSize + (i + 1) * 2 * actionsSize + actionsSize);\n        }\n    }\n\n    actionData(str) {\n        return Config.actions[str];\n    }\n\n\n    drawPieceCard(actions, pieceImage, owner, isKing, seed) {\n        this.drawCanvas(actions, pieceImage, owner, isKing, seed);\n        return (\n            this.canvas\n        );\n    }\n\n}\nexport default PieceCard;"]},"metadata":{},"sourceType":"module"}