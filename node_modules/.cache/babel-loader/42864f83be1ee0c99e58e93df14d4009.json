{"ast":null,"code":"import _classCallCheck from\"/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from'react';import Canvas from'../../canvas.component';import ChessPieceGenerator from'./chess-piece-generator';import{jsx as _jsx}from\"react/jsx-runtime\";var ChessPiecesComponent=/*#__PURE__*/function(_Component){_inherits(ChessPiecesComponent,_Component);var _super=_createSuper(ChessPiecesComponent);function ChessPiecesComponent(props){var _this;_classCallCheck(this,ChessPiecesComponent);_this=_super.call(this,props);_this.state={width:50,height:60,pieces:[]};for(var i=0;i<110;i++){var pg=new ChessPieceGenerator(_this.state.width,_this.state.height,\"\"+Math.random());_this.state.pieces.push(pg.drawPieceCanvas(\"P1\"));}return _this;}_createClass(ChessPiecesComponent,[{key:\"drawMethod\",value:function drawMethod(piece){var _this$state=this.state,width=_this$state.width,height=_this$state.height;var draw=function draw(ctx,frameCount){ctx.canvas.width=width;ctx.canvas.height=height;ctx.drawImage(piece,0,0);};return draw;}},{key:\"drawPieces\",value:function drawPieces(){var _this2=this;var pieces=this.state.pieces;return pieces.map(function(p){return/*#__PURE__*/_jsx(Canvas,{draw:_this2.drawMethod(p)});});}},{key:\"render\",value:function render(){return this.drawPieces();}}]);return ChessPiecesComponent;}(Component);export default ChessPiecesComponent;","map":{"version":3,"sources":["/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/src/components/generator/silhouettes/chess-pieces.component.jsx"],"names":["React","Component","Canvas","ChessPieceGenerator","ChessPiecesComponent","props","state","width","height","pieces","i","pg","Math","random","push","drawPieceCanvas","piece","draw","ctx","frameCount","canvas","drawImage","map","p","drawMethod","drawPieces"],"mappings":"4gBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,MAAP,KAAmB,wBAAnB,CACA,MAAOC,CAAAA,mBAAP,KAAgC,yBAAhC,C,8CAGMC,CAAAA,oB,4HAEF,8BAAYC,KAAZ,CAAmB,sDAEf,uBAAMA,KAAN,EACA,MAAKC,KAAL,CAAa,CACTC,KAAK,CAAE,EADE,CAETC,MAAM,CAAE,EAFC,CAGTC,MAAM,CAAE,EAHC,CAAb,CAMA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,GAApB,CAAyBA,CAAC,EAA1B,CAA8B,CAC1B,GAAIC,CAAAA,EAAE,CAAG,GAAIR,CAAAA,mBAAJ,CAAwB,MAAKG,KAAL,CAAWC,KAAnC,CAA0C,MAAKD,KAAL,CAAWE,MAArD,CAA6D,GAAKI,IAAI,CAACC,MAAL,EAAlE,CAAT,CACA,MAAKP,KAAL,CAAWG,MAAX,CAAkBK,IAAlB,CAAuBH,EAAE,CAACI,eAAH,CAAmB,IAAnB,CAAvB,EACH,CAZc,aAclB,C,2DAED,oBAAWC,KAAX,CAAkB,CACd,gBAA0B,KAAKV,KAA/B,CAAQC,KAAR,aAAQA,KAAR,CAAeC,MAAf,aAAeA,MAAf,CAEA,GAAMS,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACC,GAAD,CAAMC,UAAN,CAAqB,CAC9BD,GAAG,CAACE,MAAJ,CAAWb,KAAX,CAAmBA,KAAnB,CACAW,GAAG,CAACE,MAAJ,CAAWZ,MAAX,CAAoBA,MAApB,CACAU,GAAG,CAACG,SAAJ,CAAcL,KAAd,CAAqB,CAArB,CAAwB,CAAxB,EACH,CAJD,CAKA,MAAOC,CAAAA,IAAP,CACH,C,0BAED,qBAAa,iBACT,GAAQR,CAAAA,MAAR,CAAmB,KAAKH,KAAxB,CAAQG,MAAR,CACA,MAAOA,CAAAA,MAAM,CAACa,GAAP,CAAW,SAACC,CAAD,qBAAO,KAAC,MAAD,EAAQ,IAAI,CAAE,MAAI,CAACC,UAAL,CAAgBD,CAAhB,CAAd,EAAP,EAAX,CAAP,CACH,C,sBAED,iBAAS,CACL,MAAO,MAAKE,UAAL,EAAP,CACH,C,kCApC8BxB,S,EAuCnC,cAAeG,CAAAA,oBAAf","sourcesContent":["import React, { Component } from 'react'\nimport Canvas from '../../canvas.component';\nimport ChessPieceGenerator from './chess-piece-generator';\n\n\nclass ChessPiecesComponent extends Component {\n\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            width: 50,\n            height: 60,\n            pieces: []\n        }\n\n        for (var i = 0; i < 110; i++) {\n            var pg = new ChessPieceGenerator(this.state.width, this.state.height, \"\" + Math.random());\n            this.state.pieces.push(pg.drawPieceCanvas(\"P1\"));\n        }\n\n    }\n\n    drawMethod(piece) {\n        const { width, height } = this.state;\n\n        const draw = (ctx, frameCount) => {\n            ctx.canvas.width = width\n            ctx.canvas.height = height\n            ctx.drawImage(piece, 0, 0);\n        }\n        return draw;\n    }\n\n    drawPieces() {\n        const { pieces } = this.state;\n        return pieces.map((p) => <Canvas draw={this.drawMethod(p)} />)\n    }\n\n    render() {\n        return this.drawPieces();\n    }\n}\n\nexport default ChessPiecesComponent"]},"metadata":{},"sourceType":"module"}