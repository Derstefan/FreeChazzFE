{"ast":null,"code":"import _toConsumableArray from\"/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _classCallCheck from\"/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/node_modules/@babel/runtime/helpers/esm/createClass.js\";import{Component}from'react';import RandomGenerator from'./random-generator';import UtilFunctions from'./util-functions';import{Bodies}from'matter-js';var PieceGenerator=/*#__PURE__*/function(){function PieceGenerator(width,height,seedstr){_classCallCheck(this,PieceGenerator);this.gen=new RandomGenerator(seedstr);this.width=width;this.height=height;this.canvas2=document.createElement('canvas');this.c2=this.canvas2.getContext('2d');this.canvas2.width=width;this.canvas2.height=height;this.matterBodies=[];}_createClass(PieceGenerator,[{key:\"randomColor\",value:function randomColor(){var r=Math.floor(this.gen.random()*230).toString(16);var g=Math.floor(this.gen.random()*230).toString(16);var b=Math.floor(this.gen.random()*230).toString(16);return\"#\"+r+g+b;}},{key:\"randomPoints\",value:function randomPoints(num){var points=[];for(var i=0;i<num;i++){var x=this.gen.randNumOfRange(0,this.width);var y=this.gen.randNumOfRange(0,this.height);points.push({x:x,y:y});}// TODO: check if some area is there\n// let area = UtilFunctions.polygonArea(points);\n// if (area < 4) {\n//     console.log(points);\n//     points = this.randomPoints(num);\n// }\nreturn points;}},{key:\"drawShape\",value:function drawShape(points){var shape=new Path2D();for(var i=0;i<points.length;i++){if(i===0){shape.moveTo(points[i].x,points[i].y);}else{shape.lineTo(points[i].x,points[i].y);}}return shape;}},{key:\"drawMirrorShape\",value:function drawMirrorShape(points){var shape=new Path2D();for(var i=0;i<points.length;i++){var x=this.width-points[i].x;if(i===0){shape.moveTo(x,points[i].y);}else{shape.lineTo(x,points[i].y);}}return shape;}},{key:\"drawCurvedShape\",value:function drawCurvedShape(points){var shape=new Path2D();for(var i=0;i<points.length;i++){if(i===0){shape.moveTo(points[i].x,points[i].y);}else if(i%2===0){shape.quadraticCurveTo(points[i-1].x,points[i-1].y,points[i].x,points[i].y);}}return shape;}},{key:\"drawCurvedMirrorShape\",value:function drawCurvedMirrorShape(points){var shape=new Path2D();for(var i=0;i<points.length;i++){var x=this.width-points[i].x;if(i===0){shape.moveTo(x,points[i].y);}else if(i%2===0){var x1=this.width-points[i-1].x;var x2=this.width-points[i].x;shape.quadraticCurveTo(x1,points[i-1].y,x2,points[i].y);}}return shape;}// ----------------------------------------------------------------------------------------------------------------\n},{key:\"drawCurvedMirroredPolygon\",value:function drawCurvedMirroredPolygon(){var pointNumber=this.gen.randNumOfRange(3,10);var points=this.randomPoints(pointNumber);//console.log(UtilFunctions.polygonArea(points));\nvar color=this.randomColor();this.c2.fillStyle=color;this.c2.fill(this.drawCurvedShape(points));this.c2.fillStyle=color;this.c2.fill(this.drawCurvedMirrorShape(points));}},{key:\"drawMirroredPolygon\",value:function drawMirroredPolygon(){var _this=this;var pointNumber=this.gen.randNumOfRange(3,10);var points=this.randomPoints(pointNumber);//console.log(UtilFunctions.polygonArea(points));\nvar color=this.randomColor();this.c2.fillStyle=color;this.c2.fill(this.drawShape(points));this.c2.fillStyle=color;this.c2.fill(this.drawMirrorShape(points));this.addBodies(points,color);var points2=points;points2.forEach(function(p){p.x=_this.width-p.x;});this.addBodies(points2,color);}},{key:\"drawCurvedMirroredPolygonColorDiff\",value:function drawCurvedMirroredPolygonColorDiff(){var pointNumber=this.gen.randNumOfRange(3,10);var points=this.randomPoints(pointNumber);var color=this.randomColor();var color2=this.randomColor();this.c2.fillStyle=color;this.c2.fill(this.drawCurvedShape(points));this.c2.fillStyle=color2;this.c2.fill(this.drawCurvedMirrorShape(points));}},{key:\"drawMirroredPolygonColorDiff\",value:function drawMirroredPolygonColorDiff(){var _this2=this;var pointNumber=this.gen.randNumOfRange(3,10);var points=this.randomPoints(pointNumber);var color=this.randomColor();var color2=this.randomColor();this.c2.fillStyle=color;this.c2.fill(this.drawShape(points));this.c2.fillStyle=color2;this.c2.fill(this.drawMirrorShape(points));this.addBodies(points,color);var points2=points;points2.forEach(function(p){p.x=_this2.width-p.x;});this.addBodies(points2,color2);}//sort points in y direction\n},{key:\"sortPoints\",value:function sortPoints(points){return points.sort(function(a,b){return a.y>b.y?1:-1;});}},{key:\"addBodies\",value:function addBodies(points,color){var pointList=this.sortPoints(points);for(var i=2;i<pointList.length;i++){var body=Bodies.fromVertices(0,0,[points[i-2],points[i-1],points[i]]);if(body.vertices.length>=3){body.torque=0.05;this.matterBodies.push({body:body,color:color,alpha:1.0});}}}},{key:\"drawPolygons\",value:function drawPolygons(num){var _this3=this;return _toConsumableArray(Array(num).keys()).map(function(){return _this3.gen.random()>0.1?_this3.drawMirroredPolygon():_this3.drawMirroredPolygonColorDiff();});}},{key:\"getMatterBodies\",value:function getMatterBodies(){this.drawPolygons(this.gen.randNumOfRange(3,5));return this.matterBodies;}},{key:\"drawPieceCanvas\",value:function drawPieceCanvas(owner){this.drawPolygons(this.gen.randNumOfRange(3,5));// this.drawMirroredPolygon();\n// this.drawMirroredPolygonColorDiff();\n// this.drawMirroredPolygon();\n// //this.drawMirroredPolygon();\n// //        this.drawMirroredPolygonColorDiff();\n// //this.drawMirroredPolygon();\n// this.drawMirroredPolygon();\nreturn this.canvas2;}}]);return PieceGenerator;}();export default PieceGenerator;","map":{"version":3,"sources":["/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/src/components/generator/piece-generator.jsx"],"names":["Component","RandomGenerator","UtilFunctions","Bodies","PieceGenerator","width","height","seedstr","gen","canvas2","document","createElement","c2","getContext","matterBodies","r","Math","floor","random","toString","g","b","num","points","i","x","randNumOfRange","y","push","shape","Path2D","length","moveTo","lineTo","quadraticCurveTo","x1","x2","pointNumber","randomPoints","color","randomColor","fillStyle","fill","drawCurvedShape","drawCurvedMirrorShape","drawShape","drawMirrorShape","addBodies","points2","forEach","p","color2","sort","a","pointList","sortPoints","body","fromVertices","vertices","torque","alpha","Array","keys","map","drawMirroredPolygon","drawMirroredPolygonColorDiff","drawPolygons","owner"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport RandomGenerator from './random-generator';\nimport UtilFunctions from './util-functions';\nimport { Bodies } from 'matter-js';\n\nclass PieceGenerator {\n\n    constructor(width, height, seedstr) {\n        this.gen = new RandomGenerator(seedstr);\n        this.width = width;\n        this.height = height;\n        this.canvas2 = document.createElement('canvas');\n        this.c2 = this.canvas2.getContext('2d');\n        this.canvas2.width = width;\n        this.canvas2.height = height;\n        this.matterBodies = [];\n    }\n\n\n\n\n    randomColor() {\n        var r = Math.floor(this.gen.random() * 230).toString(16);\n        var g = Math.floor(this.gen.random() * 230).toString(16);\n        var b = Math.floor(this.gen.random() * 230).toString(16);\n        return \"#\" + r + g + b;\n    }\n\n    randomPoints(num) {\n        var points = [];\n        for (var i = 0; i < num; i++) {\n            var x = this.gen.randNumOfRange(0, this.width);\n            var y = this.gen.randNumOfRange(0, this.height);\n            points.push({ x: x, y: y });\n        }\n        // TODO: check if some area is there\n        // let area = UtilFunctions.polygonArea(points);\n        // if (area < 4) {\n        //     console.log(points);\n        //     points = this.randomPoints(num);\n        // }\n        return points;\n    }\n\n\n\n    drawShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else {\n                shape.lineTo(points[i].x, points[i].y);\n            }\n        }\n\n        return shape;\n    }\n\n    drawMirrorShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            var x = this.width - points[i].x;\n            if (i === 0) {\n                shape.moveTo(x, points[i].y);\n            } else {\n                shape.lineTo(x, points[i].y);\n            }\n        }\n        return shape;\n    }\n\n    drawCurvedShape(points) {\n\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else if (i % 2 === 0) {\n                shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y)\n            }\n        }\n        return shape;\n    }\n\n    drawCurvedMirrorShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            var x = this.width - points[i].x;\n            if (i === 0) {\n                shape.moveTo(x, points[i].y);\n            } else if (i % 2 === 0) {\n                var x1 = this.width - points[i - 1].x;\n                var x2 = this.width - points[i].x;\n                shape.quadraticCurveTo(x1, points[i - 1].y, x2, points[i].y)\n            }\n        }\n        return shape;\n    }\n\n\n    // ----------------------------------------------------------------------------------------------------------------\n\n    drawCurvedMirroredPolygon() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        //console.log(UtilFunctions.polygonArea(points));\n        var color = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedShape(points));\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedMirrorShape(points));\n    }\n\n    drawMirroredPolygon() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        //console.log(UtilFunctions.polygonArea(points));\n        var color = this.randomColor();\n\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawShape(points));\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawMirrorShape(points));\n\n\n\n        this.addBodies(points, color);\n        var points2 = points;\n        points2.forEach(p => { p.x = this.width - p.x; });\n        this.addBodies(points2, color);\n    }\n\n    drawCurvedMirroredPolygonColorDiff() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        var color = this.randomColor();\n        var color2 = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedShape(points));\n        this.c2.fillStyle = color2;\n        this.c2.fill(this.drawCurvedMirrorShape(points));\n    }\n\n    drawMirroredPolygonColorDiff() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        var color = this.randomColor();\n        var color2 = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawShape(points));\n        this.c2.fillStyle = color2;\n        this.c2.fill(this.drawMirrorShape(points));\n\n        this.addBodies(points, color);\n        var points2 = points;\n        points2.forEach(p => { p.x = this.width - p.x; });\n        this.addBodies(points2, color2);\n    }\n\n    //sort points in y direction\n    sortPoints(points) {\n        return points.sort((a, b) => (a.y > b.y) ? 1 : -1);\n    }\n\n    addBodies(points, color) {\n        var pointList = this.sortPoints(points);\n        for (var i = 2; i < pointList.length; i++) {\n            var body = Bodies.fromVertices(0, 0, [points[i - 2], points[i - 1], points[i]]);\n            if (body.vertices.length >= 3) {\n                body.torque = 0.05;\n                this.matterBodies.push({ body: body, color: color, alpha: 1.0 });\n            }\n\n        }\n\n    }\n\n\n    drawPolygons(num) {\n        return [...Array(num).keys()].map(() => this.gen.random() > 0.1 ? this.drawMirroredPolygon() : this.drawMirroredPolygonColorDiff());\n    }\n\n\n    getMatterBodies() {\n        this.drawPolygons(this.gen.randNumOfRange(3, 5));\n        return this.matterBodies;\n    }\n\n    drawPieceCanvas(owner) {\n\n        this.drawPolygons(this.gen.randNumOfRange(3, 5));\n        // this.drawMirroredPolygon();\n        // this.drawMirroredPolygonColorDiff();\n        // this.drawMirroredPolygon();\n        // //this.drawMirroredPolygon();\n        // //        this.drawMirroredPolygonColorDiff();\n        // //this.drawMirroredPolygon();\n        // this.drawMirroredPolygon();\n\n        return (\n            this.canvas2\n        );\n    }\n\n\n\n\n}\n\nexport default PieceGenerator"]},"metadata":{},"sourceType":"module"}