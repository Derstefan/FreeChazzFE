{"ast":null,"code":"import _classCallCheck from\"/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/node_modules/@babel/runtime/helpers/esm/createClass.js\";var UtilFunctions=/*#__PURE__*/function(){function UtilFunctions(){_classCallCheck(this,UtilFunctions);}_createClass(UtilFunctions,null,[{key:\"polygonArea\",value:// check point is in polygon\n// generate point in polygon\nfunction polygonArea(points){if(points===undefined){return 0.0;}var num=points.length;if(num<3){return 0.0;}var area=0.0;for(var i=0;i<num;i++){area+=(points[i].y+points[(i+1)%num].y)*(points[i].x-points[(i+1)%num].x);}return Math.abs(area/2.0);}}]);return UtilFunctions;}();export default UtilFunctions;","map":{"version":3,"sources":["/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/src/components/generator/util-functions.jsx"],"names":["UtilFunctions","points","undefined","num","length","area","i","y","x","Math","abs"],"mappings":"+QACMA,CAAAA,a,iJAEF;AACA;AAIA,qBAAmBC,MAAnB,CAA2B,CACvB,GAAIA,MAAM,GAAKC,SAAf,CAA0B,CACtB,MAAO,IAAP,CACH,CACD,GAAMC,CAAAA,GAAG,CAAGF,MAAM,CAACG,MAAnB,CACA,GAAID,GAAG,CAAG,CAAV,CAAa,CACT,MAAO,IAAP,CACH,CACD,GAAIE,CAAAA,IAAI,CAAG,GAAX,CAEA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,GAApB,CAAyBG,CAAC,EAA1B,CAA8B,CAC1BD,IAAI,EAAI,CAACJ,MAAM,CAACK,CAAD,CAAN,CAAUC,CAAV,CAAcN,MAAM,CAAC,CAACK,CAAC,CAAG,CAAL,EAAUH,GAAX,CAAN,CAAsBI,CAArC,GAA2CN,MAAM,CAACK,CAAD,CAAN,CAAUE,CAAV,CAAcP,MAAM,CAAC,CAACK,CAAC,CAAG,CAAL,EAAUH,GAAX,CAAN,CAAsBK,CAA/E,CAAR,CACH,CACD,MAAOC,CAAAA,IAAI,CAACC,GAAL,CAASL,IAAI,CAAG,GAAhB,CAAP,CACH,C,6BAML,cAAeL,CAAAA,aAAf","sourcesContent":["\nclass UtilFunctions {\n\n    // check point is in polygon\n    // generate point in polygon\n\n\n\n    static polygonArea(points) {\n        if (points === undefined) {\n            return 0.0;\n        }\n        const num = points.length;\n        if (num < 3) {\n            return 0.0;\n        }\n        var area = 0.0;\n\n        for (var i = 0; i < num; i++) {\n            area += (points[i].y + points[(i + 1) % num].y) * (points[i].x - points[(i + 1) % num].x);\n        }\n        return Math.abs(area / 2.0);\n    }\n\n\n\n}\n\nexport default UtilFunctions"]},"metadata":{},"sourceType":"module"}