{"ast":null,"code":"import _classCallCheck from\"/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from'react';import mainService from'../services/main.service';import Canvas from'../components/canvas.component';import PieceGenerator from'../components/generator/piece-generator';import PieceCard from'./piece-card';import Config from\"./config.json\";import RenderFunctions from\"./render-functions.js\";import serverConfig from\"../services/server-config.json\";import{Engine,Runner,Composite,Bodies,Body}from'matter-js';import{Box,Button,Modal,ThemeProvider,Typography}from'@mui/material';import Design from'./themes/Design';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var GameComponent=/*#__PURE__*/function(_Component){_inherits(GameComponent,_Component);var _super=_createSuper(GameComponent);function GameComponent(props){var _this;_classCallCheck(this,GameComponent);_this=_super.call(this,props);_this.state={gameId:JSON.parse(localStorage.getItem(\"auth\")).gameId,me:JSON.parse(localStorage.getItem(\"auth\")).player,inviteLink:\"http://\"+serverConfig.host+\":3000/joingame/\"+JSON.parse(localStorage.getItem(\"auth\")).gameId,//updater\nisInited:false,//game consts\nplayer1:{},player2:{},width:16,height:16,pieceImagesSmall:{},// images of pieces\n//pieceData for cards\npieceImages:{},//cardImages of pieces\nactions:{},// actions of pieces\npieceCard:new PieceCard(),// game state\nboardData:{},// data from server\nboardView:{},// symbol, playertype\nturn:\"undef\",round:0,winner:null,graveyard:[],//selection\nselectedField:{},selectedPiece:{},pieceId:\"\",//animation with matter.js\nengine:Engine.create(),matterBodies:[],showAnimation:false,//newGame Modal\nopen:false};//endanimation\n_this.endSequence=false;//matter.js init\n//start matter.js runner\nRunner.run(Runner.create(),_this.state.engine);//this.state.engine.gravity.scale = 0.00;\n_this.state.engine.gravity.y=0.6;_this.state.engine.timing.timeScale=0.8;_this.selectField=_this.selectField.bind(_assertThisInitialized(_this));_this.clickOnCanvas=_this.clickOnCanvas.bind(_assertThisInitialized(_this));_this.drawMethod=_this.drawMethod.bind(_assertThisInitialized(_this));_this.play=_this.play.bind(_assertThisInitialized(_this));_this.loadBoard=_this.loadBoard.bind(_assertThisInitialized(_this));_this.loadPieceData=_this.loadPieceData.bind(_assertThisInitialized(_this));_this.createMatterBodies=_this.createMatterBodies.bind(_assertThisInitialized(_this));_this.copyLink=_this.copyLink.bind(_assertThisInitialized(_this));_this.newGame=_this.newGame.bind(_assertThisInitialized(_this));_this.closeModal=_this.closeModal.bind(_assertThisInitialized(_this));_this.openModal=_this.openModal.bind(_assertThisInitialized(_this));return _this;}_createClass(GameComponent,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var isInited=this.state.isInited;//Init function \nif(!isInited){this.loadPieceData();}//start updater\nvar loadTimer=setInterval(function(){_this2.updateGameData();},Config.updateInterval);}//check for ugameupdate\n},{key:\"updateGameData\",value:function updateGameData(){var _this3=this;var _this$state=this.state,gameId=_this$state.gameId,turn=_this$state.turn;mainService.getGameData(gameId).then(function(res){_this3.setState({player1:res.data.player1,player2:res.data.player2,turn:res.data.turn,round:res.data.round,winner:res.data.winner});//when other player made his turn\nif(turn!==res.data.turn){_this3.loadBoard();}//console.log(res.data.winner);\n//check game end ?\n});}// initial creating piece graphics\n},{key:\"loadPieceData\",value:function loadPieceData(){var _this4=this;var gameId=this.state.gameId;mainService.getBoard(gameId).then(function(res){var bv=_this4.createBoard(res.data.board);var pieceImagesSmall=new Map();var actions=new Map();var pieceImages=new Map();var _loop=function _loop(i){var _loop2=function _loop2(j){if(bv[i][j].symbol!==\"\"&&pieceImagesSmall.get(bv[i][j].symbol)===undefined){pg=new PieceGenerator(Config.squareSize*Config.board.smallImage.wScale,Config.squareSize*Config.board.smallImage.hScale,bv[i][j].seed);pieceImagesSmall.set(bv[i][j].symbol,pg.drawPieceCanvas(bv[i][j].owner));mainService.generatePiece(bv[i][j].seed).then(function(res2){var pg=new PieceGenerator(Config.card.imageWidth,Config.card.imageHeight,\"\"+bv[i][j].seed);pieceImages.set(bv[i][j].symbol,pg.drawPieceCanvas(bv[i][j].owner));actions.set(bv[i][j].symbol,res2.data.actionMap.actions);});}};for(var j=0;j<bv[0].length;j++){_loop2(j);}};for(var i=0;i<bv.length;i++){var pg;_loop(i);}//TODO: alternativer RestRequest um gleich alle pieceData zu bekommen\n_this4.setState({pieceImagesSmall:pieceImagesSmall,actions:actions,pieceImages:pieceImages,isInited:true,boardView:bv,width:bv[0].length,height:bv.length});});}//update Board\n},{key:\"loadBoard\",value:function loadBoard(){var _this5=this;var _this$state2=this.state,gameId=_this$state2.gameId,graveyard=_this$state2.graveyard,engine=_this$state2.engine,matterBodies=_this$state2.matterBodies,showAnimation=_this$state2.showAnimation;var matterBodiesUpdate=matterBodies;mainService.getBoard(gameId).then(function(res){//List of deleted pieces TODO: what is if page reloaded and graveyard at first empty -> many animations at start ?\nvar deletedPieces=res.data.graveyard.slice(graveyard.length,res.data.graveyard.size);//matter bodies create, add forces and composite\nif(showAnimation){if(deletedPieces.length!==0){_this5.createMatterBodies(deletedPieces).forEach(function(b){Composite.add(engine.world,b.body);matterBodiesUpdate.push(b);});}}else{_this5.setState({showAnimation:true});}var bv=_this5.createBoard(res.data.board);_this5.setState({boardData:res.data,boardView:bv,graveyard:res.data.graveyard,matterBodies:matterBodiesUpdate,width:bv[0].length,height:bv.length});});}},{key:\"createMatterBodies\",value:function createMatterBodies(deletedPieces){var _this$state3=this.state,width=_this$state3.width,engine=_this$state3.engine;var matterBodies=[];deletedPieces.forEach(function(piece){//create body\nvar pg=new PieceGenerator(Config.squareSize*Config.board.smallImage.wScale,Config.squareSize*Config.board.smallImage.hScale,piece.seed);var xOffsetPic=Config.boardTopx+(piece.position.x+Config.board.smallImage.xOffset)*Config.squareSize;var yOffsetPic=Config.boardTopy+(piece.position.y+Config.board.smallImage.yOffset)*Config.squareSize;pg.getMatterBodies().forEach(function(b){Body.translate(b.body,{x:xOffsetPic,y:yOffsetPic});matterBodies.push(b);});var ground=Bodies.rectangle(0,yOffsetPic+Config.squareSize*0.7,21300,2,{isStatic:true});matterBodies.push({body:ground,color:\"black\",alpha:1.0,visible:false});});return matterBodies;}// save Board data\n},{key:\"createBoard\",value:function createBoard(board){var bv=board;for(var i=0;i<bv.length;i++){for(var j=0;j<bv[0].length;j++){if(board[i][j]===null){bv[i][j]={symbol:\"\",owner:\"\",possibleMoves:[],serial:\"\"};}else{bv[i][j]={symbol:bv[i][j].symbol,owner:bv[i][j].owner,possibleMoves:bv[i][j].possibleMoves,serial:bv[i][j].serial,seed:bv[i][j].seed,king:bv[i][j].king};}}}return bv;}},{key:\"selectField\",value:function selectField(x,y){var _this$state4=this.state,boardView=_this$state4.boardView,selectedField=_this$state4.selectedField,me=_this$state4.me,turn=_this$state4.turn,selectedPiece=_this$state4.selectedPiece;var isPlayerTurn=me===turn;var isEmptyField=boardView[y][x].symbol===\"\";var sthSelected=JSON.stringify(selectedField)!==\"{}\";if(sthSelected){var isAlreadySelected=selectedField.x===x&&selectedField.y===y;var isPossibleMove=selectedPiece.possibleMoves.some(function(move){return move.x===x&&move.y===y;});var isOwnSelected=me===boardView[selectedField.y][selectedField.x].owner;// move,unselect, another select ?\nif(isAlreadySelected){// unselect\nthis.setState({selectedField:{},pieceId:\"\"});}else if(isOwnSelected&&isPossibleMove&&isPlayerTurn){// move\nvar draw={fromPos:{x:selectedField.x,y:selectedField.y},toPos:{x:x,y:y}};this.play(draw);}else if(isEmptyField){// unselect\nthis.setState({selectedField:{},pieceId:\"\"});}else{// select new position\nthis.setState({selectedField:{x:x,y:y},selectedPiece:boardView[y][x],pieceId:boardView[y][x].symbol//TODO: statt symbol pieceId\n});}}else{if(!isEmptyField){// select new position\nthis.setState({selectedField:{x:x,y:y},selectedPiece:boardView[y][x],pieceId:boardView[y][x].symbol//TODO: statt symbol pieceId\n});}}}},{key:\"play\",value:function play(draw){var _this6=this;var _this$state5=this.state,gameId=_this$state5.gameId,turn=_this$state5.turn,winner=_this$state5.winner;if(winner===null){mainService.play(gameId,draw).then(function(res){//            console.log(\"played\", turn);\nvar nextTurn=turn===\"P1\"?\"P2\":\"P1\";_this6.setState({selectedField:{},turn:nextTurn});_this6.updateGameData();_this6.loadBoard();});}}},{key:\"clickOnCanvas\",value:function clickOnCanvas(event){var rect=event.target.getBoundingClientRect();var x=event.clientX-rect.left-Config.boardTopx;var y=event.clientY-rect.top-Config.boardTopy;this.selectField((x-x%Config.squareSize)/Config.squareSize,(y-y%Config.squareSize)/Config.squareSize);}},{key:\"drawMethod\",value:function drawMethod(){var _this7=this;var _this$state6=this.state,width=_this$state6.width,height=_this$state6.height,boardView=_this$state6.boardView,selectedField=_this$state6.selectedField,me=_this$state6.me,pieceImagesSmall=_this$state6.pieceImagesSmall,isInited=_this$state6.isInited,winner=_this$state6.winner,pieceId=_this$state6.pieceId,selectedPiece=_this$state6.selectedPiece,pieceCard=_this$state6.pieceCard,actions=_this$state6.actions,pieceImages=_this$state6.pieceImages,engine=_this$state6.engine,matterBodies=_this$state6.matterBodies,player1=_this$state6.player1,player2=_this$state6.player2,round=_this$state6.round;var draw=function draw(ctx,frameCount){if(boardView){var squareSize=Config.squareSize;var boardTopx=Config.boardTopx;var boardTopy=Config.boardTopy;ctx.canvas.width=squareSize*(width+1)+Config.card.width;ctx.canvas.height=squareSize*(height+1);if(player1!==null&&player2!=null){ctx.font=\"10px Arial\";var txt=player1.name+\"  vs.  \"+player2.name+\"       round: \"+round;ctx.fillText(txt,boardTopx,boardTopy-10);}//draw card\nif(pieceId!==\"\"){var cardPicsize=Config.card.width;var grd=ctx.createRadialGradient(squareSize*(width+1)+cardPicsize/2,0+cardPicsize*0.625,2,squareSize*(width+1)+cardPicsize/2,0+cardPicsize*0.625,cardPicsize*0.5);grd.addColorStop(0,\"black\");if(selectedPiece.owner===me){grd.addColorStop(1,\"rgba(0,170,0,0.1)\");}else{grd.addColorStop(1,\"rgba(170,0,0,0.1)\");}// Fill with gradient\nctx.fillStyle=grd;ctx.fillRect(squareSize*(width+1),+cardPicsize*0.125,cardPicsize,cardPicsize);ctx.drawImage(pieceCard.drawPieceCard(actions.get(pieceId),pieceImages.get(pieceId),selectedPiece.owner,selectedPiece.king===\"1\"),squareSize*(width+1),0);}//draw board\nfor(var i=0;i<width;i++){for(var j=0;j<height;j++){ctx.fillStyle=(i+j)%2===0?Config.board.color1:Config.board.color2;var xOffset=boardTopx+i*squareSize;var yOffset=boardTopy+j*squareSize;ctx.fillRect(xOffset,yOffset,squareSize,squareSize);}}// draw the border around the chessboard\nctx.strokeStyle=\"black\";ctx.strokeRect(boardTopx,boardTopy,squareSize*width,squareSize*height);if(JSON.stringify(selectedField)!==\"{}\"){// draw moves\nctx.globalAlpha=0.45;ctx.fillStyle=me===boardView[selectedField.y][selectedField.x].owner?\"lightgreen\":\"red\";for(var k=0;k<selectedPiece.possibleMoves.length;k++){var _xOffset=boardTopx+selectedPiece.possibleMoves[k].x*squareSize;var _yOffset=boardTopy+selectedPiece.possibleMoves[k].y*squareSize;ctx.fillRect(_xOffset,_yOffset,squareSize,squareSize);}//draw selected\nctx.fillStyle=me===boardView[selectedField.y][selectedField.x].owner?\"green\":\"darkred\";ctx.fillRect(boardTopx+selectedField.x*squareSize,boardTopy+selectedField.y*squareSize,squareSize,squareSize);ctx.globalAlpha=1;}// draw pieces\nif(boardView[0]&&isInited){ctx.fillStyle=\"black\";for(var _i=0;_i<width;_i++){for(var _j=0;_j<height;_j++){if(boardView[_j][_i].symbol!==\"\"){var _xOffset2=boardTopx+_i*squareSize;var _yOffset2=boardTopy+_j*squareSize;var xOffsetPic=boardTopx+(_i+Config.board.smallImage.xOffset)*squareSize;var yOffsetPic=boardTopy+(_j+Config.board.smallImage.yOffset)*squareSize;if(pieceImagesSmall.length!==0){//  console.log(pieces);\n//green or red shadow\nvar grd=ctx.createRadialGradient(_xOffset2+squareSize/2,_yOffset2+squareSize*0.6,2,_xOffset2+squareSize/2,_yOffset2+squareSize*0.6,squareSize*0.5);grd.addColorStop(0,\"black\");if(boardView[_j][_i].owner===me){grd.addColorStop(1,\"rgba(0,170,0,0.1)\");}else{grd.addColorStop(1,\"rgba(170,0,0,0.1)\");}// Fill with gradient\nctx.fillStyle=grd;ctx.fillRect(_xOffset2,_yOffset2,squareSize,squareSize);ctx.drawImage(pieceImagesSmall.get(boardView[_j][_i].symbol),xOffsetPic,yOffsetPic);}if(boardView[_j][_i].king===\"1\"){ctx.font=\"10px Arial\";ctx.fillStyle=\"#111111\";ctx.fillText(\"♔\",_xOffset2+0.8*squareSize,_yOffset2+squareSize/6);}}}}}//animation\n//console.log(\"active bodies:\", matterBodies.length);\nif(matterBodies.length!=0){if(winner!==null){_this7.endSequence=true;}RenderFunctions.renderMatterAnimation(ctx,matterBodies,frameCount);matterBodies.forEach(function(b){if(b.alpha<=0){Composite.remove(engine.world,b.body);matterBodies.splice(matterBodies.indexOf(b),1);}});}// draw winner\n//console.log(frameCount);\nif(winner!==null&&matterBodies.length===0&&_this7.endSequence===true){ctx.fillStyle=\"rgba(100,100,100,0.7)\";ctx.fillRect(boardTopx,boardTopy,squareSize*width,squareSize*height);ctx.fillStyle=\"red\";ctx.font='30px arial';ctx.fillText(winner.name+' wins!',squareSize*width/3,squareSize*height/2);}}};return draw;}},{key:\"drawGameText\",value:function drawGameText(){var _this$state7=this.state,me=_this$state7.me,turn=_this$state7.turn;if(me===turn){return\"Your turn!\";}return\"Wait for opponents turn...\";}},{key:\"copyLink\",value:function copyLink(){var inviteLink=this.state.inviteLink;navigator.clipboard.writeText(inviteLink);}},{key:\"openModal\",value:function openModal(){this.setState({open:true});}},{key:\"closeModal\",value:function closeModal(){this.setState({open:false});}},{key:\"newGame\",value:function newGame(){var history=this.props.history;history.push(\"/\");}},{key:\"render\",value:function render(){var _this$state8=this.state,player1=_this$state8.player1,player2=_this$state8.player2,round=_this$state8.round,isInited=_this$state8.isInited,winner=_this$state8.winner,open=_this$state8.open;if(isInited){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsxs(ThemeProvider,{theme:Design.theme1,children:[/*#__PURE__*/_jsx(\"div\",{class:\"col-\",children:/*#__PURE__*/_jsx(Button,{variant:\"outlined\",onClick:this.openModal,color:\"neutral\",children:\"New Game\"})}),/*#__PURE__*/_jsx(\"div\",{class:\"col-\",children:/*#__PURE__*/_jsx(Button,{variant:\"outlined\",onClick:this.copyLink,color:\"neutral\",children:\"Copy Invitelink\"})})]}),/*#__PURE__*/_jsx(\"div\",{class:\"col-sm\",children:winner===null&&this.drawGameText()})]}),/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:/*#__PURE__*/_jsx(\"div\",{class:\"mb-5\",children:/*#__PURE__*/_jsx(Canvas,{draw:this.drawMethod(),onClick:this.clickOnCanvas})})}),/*#__PURE__*/_jsx(Modal,{open:open,onClose:this.closeModal,\"aria-labelledby\":\"modal-modal-title\",\"aria-describedby\":\"modal-modal-description\",children:/*#__PURE__*/_jsxs(Box,{sx:Design.style,children:[/*#__PURE__*/_jsx(Typography,{id:\"modal-modal-title\",variant:\"h6\",component:\"h2\",children:\"Start a new game?\"}),/*#__PURE__*/_jsxs(ThemeProvider,{theme:Design.theme1,children:[/*#__PURE__*/_jsx(Button,{color:\"neutral\",onClick:this.newGame,children:\"Yes\"}),/*#__PURE__*/_jsx(Button,{color:\"neutral\",onClick:this.closeModal,children:\"Cancel\"})]})]})})]});}return\"\";}}]);return GameComponent;}(Component);export default GameComponent;","map":{"version":3,"sources":["/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/src/game/game.component.jsx"],"names":["React","Component","mainService","Canvas","PieceGenerator","PieceCard","Config","RenderFunctions","serverConfig","Engine","Runner","Composite","Bodies","Body","Box","Button","Modal","ThemeProvider","Typography","Design","GameComponent","props","state","gameId","JSON","parse","localStorage","getItem","me","player","inviteLink","host","isInited","player1","player2","width","height","pieceImagesSmall","pieceImages","actions","pieceCard","boardData","boardView","turn","round","winner","graveyard","selectedField","selectedPiece","pieceId","engine","create","matterBodies","showAnimation","open","endSequence","run","gravity","y","timing","timeScale","selectField","bind","clickOnCanvas","drawMethod","play","loadBoard","loadPieceData","createMatterBodies","copyLink","newGame","closeModal","openModal","loadTimer","setInterval","updateGameData","updateInterval","getGameData","then","res","setState","data","getBoard","bv","createBoard","board","Map","i","j","symbol","get","undefined","pg","squareSize","smallImage","wScale","hScale","seed","set","drawPieceCanvas","owner","generatePiece","res2","card","imageWidth","imageHeight","actionMap","length","matterBodiesUpdate","deletedPieces","slice","size","forEach","b","add","world","body","push","piece","xOffsetPic","boardTopx","position","x","xOffset","yOffsetPic","boardTopy","yOffset","getMatterBodies","translate","ground","rectangle","isStatic","color","alpha","visible","possibleMoves","serial","king","isPlayerTurn","isEmptyField","sthSelected","stringify","isAlreadySelected","isPossibleMove","some","move","isOwnSelected","draw","fromPos","toPos","nextTurn","event","rect","target","getBoundingClientRect","clientX","left","clientY","top","ctx","frameCount","canvas","font","txt","name","fillText","cardPicsize","grd","createRadialGradient","addColorStop","fillStyle","fillRect","drawImage","drawPieceCard","color1","color2","strokeStyle","strokeRect","globalAlpha","k","renderMatterAnimation","remove","splice","indexOf","navigator","clipboard","writeText","history","theme1","drawGameText","style"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mainService from '../services/main.service';\nimport Canvas from '../components/canvas.component';\nimport PieceGenerator from '../components/generator/piece-generator';\nimport PieceCard from './piece-card';\nimport Config from \"./config.json\";\nimport RenderFunctions from \"./render-functions.js\";\nimport serverConfig from \"../services/server-config.json\";\nimport { Engine, Runner, Composite, Bodies, Body } from 'matter-js';\nimport { Box, Button, Modal, ThemeProvider, Typography } from '@mui/material';\nimport Design from './themes/Design';\n\n\nclass GameComponent extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            me: JSON.parse(localStorage.getItem(\"auth\")).player,\n            inviteLink: \"http://\" + serverConfig.host + \":3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n\n            //updater\n            isInited: false,\n\n\n            //game consts\n            player1: {},\n            player2: {},\n            width: 16,\n            height: 16,\n            pieceImagesSmall: {}, // images of pieces\n\n            //pieceData for cards\n            pieceImages: {}, //cardImages of pieces\n            actions: {}, // actions of pieces\n            pieceCard: new PieceCard(),\n\n            // game state\n            boardData: {}, // data from server\n            boardView: {}, // symbol, playertype\n            turn: \"undef\",\n            round: 0,\n            winner: null,\n            graveyard: [],\n\n            //selection\n            selectedField: {},\n            selectedPiece: {},\n            pieceId: \"\",\n\n\n            //animation with matter.js\n            engine: Engine.create(),\n            matterBodies: [],\n            showAnimation: false,\n\n            //newGame Modal\n            open: false,\n\n\n        }\n        //endanimation\n        this.endSequence = false;\n\n        //matter.js init\n        //start matter.js runner\n        Runner.run(Runner.create(), this.state.engine);\n\n        //this.state.engine.gravity.scale = 0.00;\n        this.state.engine.gravity.y = 0.6;\n        this.state.engine.timing.timeScale = 0.8;\n\n        this.selectField = this.selectField.bind(this);\n        this.clickOnCanvas = this.clickOnCanvas.bind(this);\n        this.drawMethod = this.drawMethod.bind(this);\n        this.play = this.play.bind(this);\n        this.loadBoard = this.loadBoard.bind(this);\n        this.loadPieceData = this.loadPieceData.bind(this);\n        this.createMatterBodies = this.createMatterBodies.bind(this);\n        this.copyLink = this.copyLink.bind(this);\n        this.newGame = this.newGame.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.openModal = this.openModal.bind(this);\n\n\n    }\n\n    componentDidMount() {\n        const { isInited } = this.state;\n\n        //Init function \n        if (!isInited) {\n            this.loadPieceData();\n        }\n\n        //start updater\n        const loadTimer = setInterval(() => {\n            this.updateGameData();\n\n        }, Config.updateInterval);\n    }\n\n    //check for ugameupdate\n    updateGameData() {\n        const { gameId, turn } = this.state;\n        mainService.getGameData(gameId).then((res) => {\n\n            this.setState({ player1: res.data.player1, player2: res.data.player2, turn: res.data.turn, round: res.data.round, winner: res.data.winner });\n            //when other player made his turn\n            if (turn !== res.data.turn) {\n\n                this.loadBoard();\n            }\n            //console.log(res.data.winner);\n            //check game end ?\n        });\n    }\n\n\n    // initial creating piece graphics\n    loadPieceData() {\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv = this.createBoard(res.data.board);\n            var pieceImagesSmall = new Map();\n            var actions = new Map();\n            var pieceImages = new Map();\n            for (let i = 0; i < bv.length; i++) {\n                for (let j = 0; j < bv[0].length; j++) {\n                    if (bv[i][j].symbol !== \"\" && pieceImagesSmall.get(bv[i][j].symbol) === undefined) {\n                        var pg = new PieceGenerator(Config.squareSize * Config.board.smallImage.wScale, Config.squareSize * Config.board.smallImage.hScale, bv[i][j].seed);\n                        pieceImagesSmall.set(bv[i][j].symbol, pg.drawPieceCanvas(bv[i][j].owner));\n\n                        mainService.generatePiece(bv[i][j].seed).then(res2 => {\n                            var pg = new PieceGenerator(Config.card.imageWidth, Config.card.imageHeight, \"\" + bv[i][j].seed);\n                            pieceImages.set(bv[i][j].symbol, pg.drawPieceCanvas(bv[i][j].owner))\n                            actions.set(bv[i][j].symbol, res2.data.actionMap.actions);\n                        });\n                    }\n                }\n            }\n            //TODO: alternativer RestRequest um gleich alle pieceData zu bekommen\n\n            this.setState({ pieceImagesSmall: pieceImagesSmall, actions: actions, pieceImages: pieceImages, isInited: true, boardView: bv, width: bv[0].length, height: bv.length });\n        });\n    }\n\n    //update Board\n    loadBoard() {\n        const { gameId, graveyard, engine, matterBodies, showAnimation } = this.state;\n        var matterBodiesUpdate = matterBodies;\n        mainService.getBoard(gameId).then((res) => {\n            //List of deleted pieces TODO: what is if page reloaded and graveyard at first empty -> many animations at start ?\n\n            let deletedPieces = res.data.graveyard.slice(graveyard.length, res.data.graveyard.size);\n\n            //matter bodies create, add forces and composite\n            if (showAnimation) {\n                if (deletedPieces.length !== 0) {\n                    this.createMatterBodies(deletedPieces).forEach(b => {\n                        Composite.add(engine.world, b.body);\n                        matterBodiesUpdate.push(b);\n                    });\n                }\n            } else {\n                this.setState({ showAnimation: true });\n            }\n\n            let bv = this.createBoard(res.data.board);\n            this.setState({ boardData: res.data, boardView: bv, graveyard: res.data.graveyard, matterBodies: matterBodiesUpdate, width: bv[0].length, height: bv.length });\n        });\n    }\n\n    createMatterBodies(deletedPieces) {\n        const { width, engine } = this.state;\n        var matterBodies = [];\n        deletedPieces.forEach(piece => {\n            //create body\n            var pg = new PieceGenerator(Config.squareSize * Config.board.smallImage.wScale, Config.squareSize * Config.board.smallImage.hScale, piece.seed);\n            let xOffsetPic = Config.boardTopx + (piece.position.x + Config.board.smallImage.xOffset) * Config.squareSize;\n            let yOffsetPic = Config.boardTopy + (piece.position.y + Config.board.smallImage.yOffset) * Config.squareSize;\n\n            pg.getMatterBodies().forEach(b => {\n                Body.translate(b.body, { x: xOffsetPic, y: yOffsetPic });\n                matterBodies.push(b);\n            });\n            var ground = Bodies.rectangle(0, yOffsetPic + Config.squareSize * 0.7, 21300, 2, { isStatic: true });\n            matterBodies.push({ body: ground, color: \"black\", alpha: 1.0, visible: false });\n        });\n\n        return matterBodies;\n\n    }\n\n\n    // save Board data\n    createBoard(board) {\n        let bv = board;\n        for (let i = 0; i < bv.length; i++) {\n            for (let j = 0; j < bv[0].length; j++) {\n                if (board[i][j] === null) {\n                    bv[i][j] = {\n                        symbol: \"\",\n                        owner: \"\",\n                        possibleMoves: [],\n                        serial: \"\"\n                    };\n                } else {\n                    bv[i][j] = {\n                        symbol: bv[i][j].symbol,\n                        owner: bv[i][j].owner,\n                        possibleMoves: bv[i][j].possibleMoves,\n                        serial: bv[i][j].serial,\n                        seed: bv[i][j].seed,\n                        king: bv[i][j].king\n                    };\n                }\n            }\n        }\n        return bv;\n    }\n\n\n    selectField(x, y) {\n        const { boardView, selectedField, me, turn, selectedPiece } = this.state;\n        const isPlayerTurn = me === turn;\n        const isEmptyField = boardView[y][x].symbol === \"\";\n        const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n        if (sthSelected) {\n            const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n            const isPossibleMove = selectedPiece.possibleMoves.some(move => move.x === x && move.y === y);\n            const isOwnSelected = me === boardView[selectedField.y][selectedField.x].owner;\n\n            // move,unselect, another select ?\n\n            if (isAlreadySelected) {\n                // unselect\n                this.setState({\n                    selectedField: {},\n                    pieceId: \"\"\n                });\n            } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n                // move\n                const draw = { fromPos: { x: selectedField.x, y: selectedField.y }, toPos: { x: x, y: y } }\n                this.play(draw);\n            } else if (isEmptyField) {\n                // unselect\n                this.setState({\n                    selectedField: {},\n                    pieceId: \"\"\n                });\n            } else {\n                // select new position\n                this.setState({\n                    selectedField: { x: x, y: y },\n                    selectedPiece: boardView[y][x],\n                    pieceId: boardView[y][x].symbol //TODO: statt symbol pieceId\n                });\n            }\n        } else {\n            if (!isEmptyField) {\n                // select new position\n                this.setState({\n                    selectedField: { x: x, y: y },\n                    selectedPiece: boardView[y][x],\n                    pieceId: boardView[y][x].symbol //TODO: statt symbol pieceId\n                });\n            }\n        }\n    }\n\n    play(draw) {\n        const { gameId, turn, winner } = this.state;\n        if (winner === null) {\n            mainService.play(gameId, draw).then((res) => {\n                //            console.log(\"played\", turn);\n                const nextTurn = (turn === \"P1\") ? \"P2\" : \"P1\";\n                this.setState({\n                    selectedField: {},\n                    turn: nextTurn\n                });\n\n                this.updateGameData();\n                this.loadBoard();\n            });\n        }\n    }\n\n\n\n\n    clickOnCanvas(event) {\n        const rect = event.target.getBoundingClientRect();\n        const x = event.clientX - rect.left - Config.boardTopx;\n        const y = event.clientY - rect.top - Config.boardTopy;\n        this.selectField((x - x % Config.squareSize) / (Config.squareSize), (y - y % Config.squareSize) / (Config.squareSize));\n    }\n\n    drawMethod() {\n        const { width, height, boardView, selectedField, me, pieceImagesSmall, isInited, winner, pieceId, selectedPiece, pieceCard, actions, pieceImages, engine, matterBodies, player1, player2, round } = this.state;\n\n\n        const draw = (ctx, frameCount) => {\n            if (boardView) {\n                const squareSize = Config.squareSize;\n                const boardTopx = Config.boardTopx;\n                const boardTopy = Config.boardTopy;\n\n                ctx.canvas.width = squareSize * (width + 1) + Config.card.width;\n                ctx.canvas.height = squareSize * (height + 1);\n\n                if (player1 !== null && player2 != null) {\n                    ctx.font = \"10px Arial\";\n                    let txt = player1.name + \"  vs.  \" + player2.name + \"       round: \" + round;\n                    ctx.fillText(txt, boardTopx, boardTopy - 10);\n                }\n\n                //draw card\n                if (pieceId !== \"\") {\n                    var cardPicsize = Config.card.width;\n                    var grd = ctx.createRadialGradient(squareSize * (width + 1) + cardPicsize / 2, 0 + cardPicsize * 0.625, 2, squareSize * (width + 1) + cardPicsize / 2, 0 + cardPicsize * 0.625, cardPicsize * 0.5);\n                    grd.addColorStop(0, \"black\");\n                    if (selectedPiece.owner === me) {\n                        grd.addColorStop(1, \"rgba(0,170,0,0.1)\");\n                    } else {\n                        grd.addColorStop(1, \"rgba(170,0,0,0.1)\");\n                    }\n                    // Fill with gradient\n                    ctx.fillStyle = grd;\n                    ctx.fillRect(squareSize * (width + 1), + cardPicsize * 0.125, cardPicsize, cardPicsize);\n\n                    ctx.drawImage(pieceCard.drawPieceCard(actions.get(pieceId), pieceImages.get(pieceId), selectedPiece.owner, selectedPiece.king === \"1\"), squareSize * (width + 1), 0);\n                }\n\n                //draw board\n                for (let i = 0; i < width; i++) {\n                    for (let j = 0; j < height; j++) {\n                        ctx.fillStyle = ((i + j) % 2 === 0) ? Config.board.color1 : Config.board.color2;\n                        let xOffset = boardTopx + i * squareSize;\n                        let yOffset = boardTopy + j * squareSize;\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n                }\n                // draw the border around the chessboard\n                ctx.strokeStyle = \"black\";\n                ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height)\n\n\n                if (JSON.stringify(selectedField) !== \"{}\") {\n                    // draw moves\n                    ctx.globalAlpha = 0.45;\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"lightgreen\" : \"red\";\n                    for (let k = 0; k < selectedPiece.possibleMoves.length; k++) {\n                        let xOffset = boardTopx + selectedPiece.possibleMoves[k].x * squareSize;\n                        let yOffset = boardTopy + selectedPiece.possibleMoves[k].y * squareSize;\n\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n\n                    //draw selected\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"green\" : \"darkred\";\n                    ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n                    ctx.globalAlpha = 1;\n                }\n\n                // draw pieces\n                if (boardView[0] && isInited) {\n                    ctx.fillStyle = \"black\";\n\n                    for (let i = 0; i < width; i++) {\n                        for (let j = 0; j < height; j++) {\n                            if (boardView[j][i].symbol !== \"\") {\n\n                                let xOffset = boardTopx + i * squareSize;\n                                let yOffset = boardTopy + j * squareSize;\n                                let xOffsetPic = boardTopx + (i + Config.board.smallImage.xOffset) * squareSize;\n                                let yOffsetPic = boardTopy + (j + Config.board.smallImage.yOffset) * squareSize;\n\n                                if (pieceImagesSmall.length !== 0) {\n                                    //  console.log(pieces);\n\n\n                                    //green or red shadow\n                                    var grd = ctx.createRadialGradient(xOffset + squareSize / 2, yOffset + squareSize * 0.6, 2, xOffset + squareSize / 2, yOffset + squareSize * 0.6, squareSize * 0.5);\n                                    grd.addColorStop(0, \"black\");\n                                    if (boardView[j][i].owner === me) {\n                                        grd.addColorStop(1, \"rgba(0,170,0,0.1)\");\n                                    } else {\n                                        grd.addColorStop(1, \"rgba(170,0,0,0.1)\");\n                                    }\n                                    // Fill with gradient\n                                    ctx.fillStyle = grd;\n                                    ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n\n                                    ctx.drawImage(pieceImagesSmall.get(boardView[j][i].symbol), xOffsetPic, yOffsetPic);\n                                }\n                                if (boardView[j][i].king === \"1\") {\n                                    ctx.font = \"10px Arial\";\n                                    ctx.fillStyle = \"#111111\";\n                                    ctx.fillText(\"♔\", xOffset + 0.8 * squareSize, yOffset + squareSize / 6);\n                                }\n\n                            }\n                        }\n                    }\n                }\n                //animation\n                //console.log(\"active bodies:\", matterBodies.length);\n                if (matterBodies.length != 0) {\n                    if (winner !== null) {\n                        this.endSequence = true;\n                    }\n                    RenderFunctions.renderMatterAnimation(ctx, matterBodies, frameCount);\n                    matterBodies.forEach(b => {\n                        if (b.alpha <= 0) {\n                            Composite.remove(engine.world, b.body);\n                            matterBodies.splice(matterBodies.indexOf(b), 1);\n                        }\n                    })\n\n                }\n\n\n\n                // draw winner\n                //console.log(frameCount);\n                if (winner !== null && matterBodies.length === 0 && this.endSequence === true) {\n                    ctx.fillStyle = \"rgba(100,100,100,0.7)\"\n                    ctx.fillRect(boardTopx, boardTopy, squareSize * width, squareSize * height)\n\n                    ctx.fillStyle = \"red\"\n                    ctx.font = '30px arial';\n                    ctx.fillText(winner.name + ' wins!', squareSize * width / 3, squareSize * height / 2);\n                }\n\n            }\n        }\n        return draw;\n\n    }\n\n    drawGameText() {\n        const { me, turn } = this.state;\n        if (me === turn) {\n            return \"Your turn!\";\n        }\n        return \"Wait for opponents turn...\";\n    }\n\n    copyLink() {\n        const { inviteLink } = this.state;\n        navigator.clipboard.writeText(inviteLink);\n    }\n\n    openModal() {\n        this.setState({ open: true });\n    }\n\n    closeModal() {\n        this.setState({ open: false });\n    }\n\n    newGame() {\n        const { history } = this.props;\n\n        history.push(\"/\");\n    }\n\n\n    render() {\n        const { player1, player2, round, isInited, winner, open } = this.state;\n\n        if (isInited) {\n            return (\n                <div>\n                    <div className=\"row\">\n                        <ThemeProvider theme={Design.theme1}>\n                            <div class=\"col-\"><Button variant=\"outlined\" onClick={this.openModal} color=\"neutral\">New Game</Button></div>\n                            <div class=\"col-\"><Button variant=\"outlined\" onClick={this.copyLink} color=\"neutral\">Copy Invitelink</Button></div>\n                        </ThemeProvider>\n                        <div class=\"col-sm\">\n                            {winner === null && this.drawGameText()}\n                        </div>\n\n                    </div>\n                    <div className=\"row\">\n                        <div class=\"mb-5\">\n                            <Canvas draw={this.drawMethod()} onClick={this.clickOnCanvas} />\n\n                        </div>\n                    </div >\n                    {/*new game modal??*/}\n                    <Modal\n                        open={open}\n                        onClose={this.closeModal}\n                        aria-labelledby=\"modal-modal-title\"\n                        aria-describedby=\"modal-modal-description\"\n                    >\n                        <Box sx={Design.style}>\n                            <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n                                Start a new game?\n                            </Typography>\n                            <ThemeProvider theme={Design.theme1}>\n                                <Button color=\"neutral\" onClick={this.newGame}>Yes</Button>\n                                <Button color=\"neutral\" onClick={this.closeModal}>Cancel</Button>\n                            </ThemeProvider>\n                        </Box>\n                    </Modal>\n                </div >\n            )\n        }\n        return \"\";\n    }\n}\n\nexport default GameComponent"]},"metadata":{},"sourceType":"module"}