{"ast":null,"code":"import Config from \"./config.json\";\n\nclass PieceCard {\n  constructor() {\n    this.canvas = document.createElement('canvas');\n    this.ctx = this.canvas.getContext('2d');\n    this.canvas.width = Config.card.width;\n    this.canvas.height = Config.card.height;\n  }\n\n  drawCanvas(actions, pieceImage, owner, isKing, seed) {\n    const actionsSize = Config.card.actionsSize;\n    const actionsOffsetX = Config.card.actionsOffsetX;\n    const actionsOffsetY = Config.card.actionsOffsetY;\n    var ctx = this.ctx;\n\n    if (actions !== undefined) {\n      ctx.canvas.width = Config.card.width;\n      ctx.canvas.height = Config.card.height;\n      ctx.drawImage(pieceImage, 32, 10); // draw actions\n\n      var actionLegend = [];\n\n      for (var i = 0; i < actions.length; i++) {\n        for (var j = 0; j < actions[0].length; j++) {\n          if (actions[i][j] !== \"-\") {\n            var offsetY;\n\n            if (owner === \"P1\") {\n              offsetY = actionsOffsetY + (actions[0].length - 1 - j) * actionsSize;\n            } else {\n              offsetY = actionsOffsetY + j * actionsSize;\n            }\n\n            if (!actionLegend.includes(actions[i][j])) {\n              actionLegend.push(actions[i][j]);\n            }\n\n            ctx.fillStyle = this.mapActionToColor(actions[i][j]);\n            ctx.fillRect(actionsOffsetX + i * actionsSize, offsetY, actionsSize, actionsSize);\n          }\n        }\n      }\n\n      ctx.lineWidth = 0.5;\n      ctx.strokeStyle = \"#AAAAAA\";\n\n      for (i = 0; i < actions.length + 1; i++) {\n        //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + actions.length + 1 * actionsSize);\n        //console.log(i);\n        ctx.beginPath();\n        ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n        ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + actions.length * actionsSize);\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n        ctx.lineTo(actionsOffsetX + actions.length * actionsSize, actionsOffsetY + i * actionsSize);\n        ctx.stroke();\n      }\n\n      if (isKing) {\n        ctx.font = \"20px Arial\";\n        ctx.fillStyle = \"#111111\";\n        ctx.fillText(\"â™”\", this.canvas.width - 20, 37);\n      }\n    }\n\n    ctx.fillStyle = '#000000';\n    ctx.font = \"10px Arial\";\n    ctx.fillText(\"seed: \" + seed, actionsOffsetX, actionsOffsetY + actions.length * actionsSize + 1 * actionsSize + actionsSize); // Legend\n\n    for (i = 1; i < actionLegend.length + 1; i++) {\n      ctx.fillStyle = this.mapActionToColor(actionLegend[i]); //console.log(actionLegend[i]);\n\n      ctx.fillRect(actionsOffsetX, actionsOffsetY + actions.length * actionsSize + (i + 1) * 2 * actionsSize, actionsSize, actionsSize);\n      ctx.font = \"10px Arial\";\n      ctx.fillText(this.mapActionToText(actionLegend[i]), actionsOffsetX + actionsSize * 2, actionsOffsetY + actions.length * actionsSize + (i + 1) * 2 * actionsSize + actionsSize);\n    }\n  }\n\n  mapActionToColor(str) {\n    if (str === \"P\") {\n      return \"#11AA11\";\n    } else if (str === \"E\") {\n      return \"#BBBB11\";\n    } else if (str === \"F\") {\n      return \"#1111BB\";\n    } else if (str === \"M\") {\n      return \"#11BBBB\";\n    } else if (str === \"S\") {\n      return \"#BB55BB\";\n    } else if (str === \"R\") {\n      return \"#BB1111\";\n    } else if (str === \"C\") {\n      return \"#BB9988\";\n    } else if (str === \"Y\") {\n      return \"#BB9900\";\n    } else if (str === \"Z\") {\n      return \"#333333\";\n    } else {\n      return \"#666666\";\n    }\n  }\n\n  mapActionToText(str) {\n    console.log(str);\n\n    if (str === \"P\") {\n      return \"piece location\";\n    } else if (str === \"E\") {\n      return \"attack only\";\n    } else if (str === \"F\") {\n      return \"move only\";\n    } else if (str === \"M\") {\n      return \"walk a way\";\n    } else if (str === \"S\") {\n      return \"swap positions\";\n    } else if (str === \"R\") {\n      return \"rush\";\n    } else if (str === \"C\") {\n      return \"cross attack\";\n    } else if (str === \"Y\") {\n      return \"explosion\";\n    } else if (str === \"Z\") {\n      return \"zombie-attack\";\n    } else {\n      return \"attack or just move\";\n    }\n  }\n\n  drawPieceCard(actions, pieceImage, owner, isKing, seed) {\n    this.drawCanvas(actions, pieceImage, owner, isKing, seed);\n    return this.canvas;\n  }\n\n}\n\nexport default PieceCard;","map":{"version":3,"sources":["/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/src/game/piece-card.jsx"],"names":["Config","PieceCard","constructor","canvas","document","createElement","ctx","getContext","width","card","height","drawCanvas","actions","pieceImage","owner","isKing","seed","actionsSize","actionsOffsetX","actionsOffsetY","undefined","drawImage","actionLegend","i","length","j","offsetY","includes","push","fillStyle","mapActionToColor","fillRect","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","font","fillText","mapActionToText","str","console","log","drawPieceCard"],"mappings":"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","sourcesContent":["import Config from \"./config.json\";\n\nclass PieceCard {\n\n    constructor() {\n        this.canvas = document.createElement('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.canvas.width = Config.card.width;\n        this.canvas.height = Config.card.height;\n    }\n\n    drawCanvas(actions, pieceImage, owner, isKing, seed) {\n        const actionsSize = Config.card.actionsSize;\n        const actionsOffsetX = Config.card.actionsOffsetX;\n        const actionsOffsetY = Config.card.actionsOffsetY;\n        var ctx = this.ctx;\n\n        if (actions !== undefined) {\n            ctx.canvas.width = Config.card.width;\n            ctx.canvas.height = Config.card.height;\n\n            ctx.drawImage(pieceImage, 32, 10);\n\n            // draw actions\n\n            var actionLegend = [];\n\n            for (var i = 0; i < actions.length; i++) {\n                for (var j = 0; j < actions[0].length; j++) {\n                    if (actions[i][j] !== \"-\") {\n                        var offsetY;\n                        if (owner === \"P1\") {\n                            offsetY = actionsOffsetY + (actions[0].length - 1 - j) * actionsSize;\n                        } else {\n                            offsetY = actionsOffsetY + j * actionsSize\n                        }\n                        if (!actionLegend.includes(actions[i][j])) {\n                            actionLegend.push(actions[i][j]);\n                        }\n                        ctx.fillStyle = this.mapActionToColor(actions[i][j]);\n                        ctx.fillRect(actionsOffsetX + i * actionsSize, offsetY, actionsSize, actionsSize);\n                    }\n                }\n            }\n\n\n            ctx.lineWidth = 0.5;\n            ctx.strokeStyle = \"#AAAAAA\";\n            for (i = 0; i < actions.length + 1; i++) {\n                //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + actions.length + 1 * actionsSize);\n                //console.log(i);\n\n                ctx.beginPath();\n                ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n                ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + (actions.length) * actionsSize);\n                ctx.stroke();\n\n                ctx.beginPath();\n                ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n                ctx.lineTo(actionsOffsetX + (actions.length) * actionsSize, actionsOffsetY + i * actionsSize);\n                ctx.stroke();\n            }\n\n            if (isKing) {\n                ctx.font = \"20px Arial\";\n                ctx.fillStyle = \"#111111\";\n                ctx.fillText(\"â™”\", this.canvas.width - 20, 37);\n            }\n        }\n        ctx.fillStyle = '#000000';\n        ctx.font = \"10px Arial\";\n        ctx.fillText(\"seed: \" + seed, actionsOffsetX, actionsOffsetY + actions.length * actionsSize + 1 * actionsSize + actionsSize);\n        // Legend\n        for (i = 1; i < actionLegend.length + 1; i++) {\n            ctx.fillStyle = this.mapActionToColor(actionLegend[i]);\n            //console.log(actionLegend[i]);\n            ctx.fillRect(actionsOffsetX, actionsOffsetY + actions.length * actionsSize + (i + 1) * 2 * actionsSize, actionsSize, actionsSize);\n            ctx.font = \"10px Arial\";\n            ctx.fillText(this.mapActionToText(actionLegend[i]), actionsOffsetX + actionsSize * 2, actionsOffsetY + actions.length * actionsSize + (i + 1) * 2 * actionsSize + actionsSize);\n\n        }\n\n\n    }\n\n\n    mapActionToColor(str) {\n        if (str === \"P\") {\n            return \"#11AA11\";\n        } else if (str === \"E\") {\n            return \"#BBBB11\";\n        } else if (str === \"F\") {\n            return \"#1111BB\";\n        } else if (str === \"M\") {\n            return \"#11BBBB\";\n        } else if (str === \"S\") {\n            return \"#BB55BB\";\n        } else if (str === \"R\") {\n            return \"#BB1111\";\n        } else if (str === \"C\") {\n            return \"#BB9988\";\n        } else if (str === \"Y\") {\n            return \"#BB9900\";\n        } else if (str === \"Z\") {\n            return \"#333333\";\n        } else {\n            return \"#666666\";\n        }\n    }\n\n    mapActionToText(str) {\n        console.log(str);\n        if (str === \"P\") {\n            return \"piece location\";\n        } else if (str === \"E\") {\n            return \"attack only\";\n        } else if (str === \"F\") {\n            return \"move only\";\n        } else if (str === \"M\") {\n            return \"walk a way\";\n        } else if (str === \"S\") {\n            return \"swap positions\";\n        } else if (str === \"R\") {\n            return \"rush\";\n        } else if (str === \"C\") {\n            return \"cross attack\";\n        } else if (str === \"Y\") {\n            return \"explosion\";\n        } else if (str === \"Z\") {\n            return \"zombie-attack\";\n        } else {\n            return \"attack or just move\";\n        }\n    }\n\n    drawPieceCard(actions, pieceImage, owner, isKing, seed) {\n        this.drawCanvas(actions, pieceImage, owner, isKing, seed);\n        return (\n            this.canvas\n        );\n    }\n\n}\nexport default PieceCard;"]},"metadata":{},"sourceType":"module"}