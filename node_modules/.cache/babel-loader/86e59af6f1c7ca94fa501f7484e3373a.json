{"ast":null,"code":"var _jsxFileName = \"/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/src/game/game.component.jsx\";\nimport React, { Component } from 'react';\nimport mainService from '../services/main.service';\nimport Canvas from '../components/canvas.component';\nimport PieceGenerator from '../components/generator/piece-generator';\nimport PieceCard from './piece-card';\nimport Config from \"./config.json\";\nimport RenderFunctions from \"./render-functions.js\";\nimport serverConfig from \"../services/server-config.json\";\nimport { Engine, Runner, Composite, Bodies, Body } from 'matter-js';\nimport { Box, Button, Modal, ThemeProvider, Typography } from '@mui/material';\nimport Design from './themes/Design';\nimport RandomGenerator from '../components/generator/random-generator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GameComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      me: JSON.parse(localStorage.getItem(\"auth\")).player,\n      inviteLink: serverConfig.hostfe + \"/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      seed: JSON.parse(localStorage.getItem(\"auth\")).seed,\n      version: JSON.parse(localStorage.getItem(\"auth\")).version,\n      //updater\n      isInited: false,\n      //game consts\n      player1: null,\n      player2: null,\n      width: 16,\n      height: 16,\n      pieceImagesSmall: {},\n      // images of pieces\n      //pieceData for cards\n      pieceImages: {},\n      //cardImages of pieces\n      actions: {},\n      // actions of pieces\n      pieceCard: new PieceCard(),\n      // game state\n      boardData: {},\n      // data from server\n      boardView: {},\n      // symbol, playertype\n      turn: \"undef\",\n      round: 0,\n      winner: null,\n      graveyard: [],\n      //selection\n      selectedField: {},\n      selectedPiece: {},\n      pieceId: \"\",\n      //animation with matter.js\n      engine: Engine.create(),\n      matterBodies: [],\n      showAnimation: false,\n      //newGame Modal\n      open: false\n    }; //endanimation\n\n    this.endSequence = false; //matter.js init\n    //start matter.js runner\n\n    Runner.run(Runner.create(), this.state.engine); //this.state.engine.gravity.scale = 0.00;\n\n    this.state.engine.gravity.y = 0.6;\n    this.state.engine.timing.timeScale = 0.8;\n    this.selectField = this.selectField.bind(this);\n    this.clickOnCanvas = this.clickOnCanvas.bind(this);\n    this.drawMethod = this.drawMethod.bind(this);\n    this.play = this.play.bind(this);\n    this.loadBoard = this.loadBoard.bind(this);\n    this.loadPieceData = this.loadPieceData.bind(this);\n    this.createMatterBodies = this.createMatterBodies.bind(this);\n    this.copyLink = this.copyLink.bind(this);\n    this.newGame = this.newGame.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.openModal = this.openModal.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      isInited\n    } = this.state; //Init function \n\n    if (!isInited) {\n      this.loadPieceData();\n    } //start updater\n\n\n    const loadTimer = setInterval(() => {\n      this.updateGameData();\n    }, Config.updateInterval);\n  } //check for ugameupdate\n\n\n  updateGameData() {\n    const {\n      gameId,\n      turn\n    } = this.state;\n    mainService.getGameData(gameId).then(res => {\n      this.setState({\n        player1: res.data.player1,\n        player2: res.data.player2,\n        turn: res.data.turn,\n        round: res.data.round,\n        winner: res.data.winner\n      }); //when other player made his turn\n\n      if (turn !== res.data.turn) {\n        this.loadBoard();\n      } //console.log(res.data.winner);\n      //check game end ?\n\n    });\n  } // initial creating piece graphics\n\n\n  loadPieceData() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getBoard(gameId).then(res => {\n      let bv = this.createBoard(res.data.board);\n      var pieceImagesSmall = new Map();\n      var actions = new Map();\n      var pieceImages = new Map();\n\n      for (let i = 0; i < bv.length; i++) {\n        for (let j = 0; j < bv[0].length; j++) {\n          if (bv[i][j].symbol !== \"\" && pieceImagesSmall.get(bv[i][j].symbol) === undefined) {\n            var pg = new PieceGenerator(Config.squareSize * Config.board.smallImage.wScale, Config.squareSize * Config.board.smallImage.hScale, bv[i][j].seed);\n            pieceImagesSmall.set(bv[i][j].symbol + bv[i][j].owner, pg.drawPieceCanvas(bv[i][j].owner, bv[i][j].lvl));\n            mainService.generatePiece(bv[i][j].seed).then(res2 => {\n              var pg = new PieceGenerator(Config.card.imageWidth, Config.card.imageHeight, \"\" + bv[i][j].seed);\n              pieceImages.set(bv[i][j].symbol + bv[i][j].owner, pg.drawPieceCanvas(bv[i][j].owner, bv[i][j].lvl));\n              actions.set(bv[i][j].symbol + bv[i][j].owner, res2.data.actionMap.actions);\n            });\n          }\n        }\n      } //TODO: alternativer RestRequest um gleich alle pieceData zu bekommen\n\n\n      this.setState({\n        pieceImagesSmall: pieceImagesSmall,\n        actions: actions,\n        pieceImages: pieceImages,\n        isInited: true,\n        boardView: bv,\n        width: bv[0].length,\n        height: bv.length\n      });\n    });\n  } //update Board\n\n\n  loadBoard() {\n    const {\n      gameId,\n      graveyard,\n      engine,\n      matterBodies,\n      showAnimation\n    } = this.state;\n    var matterBodiesUpdate = matterBodies;\n    mainService.getBoard(gameId).then(res => {\n      //List of deleted pieces TODO: what is if page reloaded and graveyard at first empty -> many animations at start ?\n      let deletedPieces = res.data.graveyard.slice(graveyard.length, res.data.graveyard.size); //matter bodies create, add forces and composite\n\n      if (showAnimation) {\n        if (deletedPieces.length !== 0) {\n          this.createMatterBodies(deletedPieces).forEach(b => {\n            Composite.add(engine.world, b.body);\n            matterBodiesUpdate.push(b);\n          });\n        }\n      } else {\n        this.setState({\n          showAnimation: true\n        });\n      }\n\n      let bv = this.createBoard(res.data.board);\n      this.setState({\n        boardData: res.data,\n        boardView: bv,\n        graveyard: res.data.graveyard,\n        matterBodies: matterBodiesUpdate,\n        width: bv[0].length,\n        height: bv.length\n      });\n    });\n  }\n\n  createMatterBodies(deletedPieces) {\n    const {\n      width,\n      engine\n    } = this.state;\n    var matterBodies = [];\n    deletedPieces.forEach(piece => {\n      //create body\n      var pg = new PieceGenerator(Config.squareSize * Config.board.smallImage.wScale, Config.squareSize * Config.board.smallImage.hScale, piece.seed);\n      let xOffsetPic = Config.boardTopx + (piece.position.x + Config.board.smallImage.xOffset) * Config.squareSize;\n      let yOffsetPic = Config.boardTopy + (piece.position.y + Config.board.smallImage.yOffset) * Config.squareSize;\n      pg.getMatterBodies().forEach(b => {\n        Body.translate(b.body, {\n          x: xOffsetPic,\n          y: yOffsetPic\n        });\n        matterBodies.push(b);\n      });\n      var ground = Bodies.rectangle(0, yOffsetPic + Config.squareSize * 0.7, 21300, 2, {\n        isStatic: true\n      });\n      matterBodies.push({\n        body: ground,\n        color: \"black\",\n        alpha: 1.0,\n        visible: false\n      });\n    });\n    return matterBodies;\n  } // save Board data\n\n\n  createBoard(board) {\n    let bv = board;\n\n    for (let i = 0; i < bv.length; i++) {\n      for (let j = 0; j < bv[0].length; j++) {\n        if (board[i][j] === null) {\n          bv[i][j] = {\n            symbol: \"\",\n            owner: \"\",\n            possibleMoves: [],\n            serial: \"\"\n          };\n        } else {\n          bv[i][j] = {\n            lvl: bv[i][j].lvl,\n            symbol: bv[i][j].symbol,\n            owner: bv[i][j].owner,\n            possibleMoves: bv[i][j].possibleMoves,\n            serial: bv[i][j].serial,\n            seed: bv[i][j].seed,\n            king: bv[i][j].king\n          };\n        }\n      }\n    }\n\n    return bv;\n  }\n\n  selectField(x, y) {\n    const {\n      boardView,\n      selectedField,\n      me,\n      turn,\n      selectedPiece\n    } = this.state;\n    const isPlayerTurn = me === turn;\n    const isEmptyField = boardView[y][x].symbol === \"\";\n    const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n    if (sthSelected) {\n      const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n      const isPossibleMove = selectedPiece.possibleMoves.some(move => move.x === x && move.y === y);\n      const isOwnSelected = me === boardView[selectedField.y][selectedField.x].owner; // move,unselect, another select ?\n\n      if (isAlreadySelected) {\n        // unselect\n        this.setState({\n          selectedField: {},\n          pieceId: \"\"\n        });\n      } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n        // move\n        const draw = {\n          fromPos: {\n            x: selectedField.x,\n            y: selectedField.y\n          },\n          toPos: {\n            x: x,\n            y: y\n          }\n        };\n        this.play(draw);\n      } else if (isEmptyField) {\n        // unselect\n        this.setState({\n          selectedField: {},\n          pieceId: \"\"\n        });\n      } else {\n        // select new position\n        this.setState({\n          selectedField: {\n            x: x,\n            y: y\n          },\n          selectedPiece: boardView[y][x],\n          pieceId: boardView[y][x].symbol + boardView[y][x].owner //TODO: statt symbol pieceId\n\n        });\n      }\n    } else {\n      if (!isEmptyField) {\n        // select new position\n        this.setState({\n          selectedField: {\n            x: x,\n            y: y\n          },\n          selectedPiece: boardView[y][x],\n          pieceId: boardView[y][x].symbol + boardView[y][x].owner //TODO: statt symbol pieceId\n\n        });\n      }\n    }\n  }\n\n  playSound(pieces) {// for (var i = 0; i < pieces.length; i++) {\n    //     var gen = new RandomGenerator(pieces[i].id + \"\");\n    //     this.midiSounds.playDrumsAt(this.midiSounds.contextTime(), [Math.floor(gen.random() * 230), Math.floor(gen.random() * 230), Math.floor(gen.random() * 230)]);\n    // }\n  }\n\n  play(draw) {\n    const {\n      gameId,\n      turn,\n      winner\n    } = this.state;\n\n    if (winner === null) {\n      mainService.play(gameId, draw).then(res => {\n        //            console.log(\"played\", turn);\n        const nextTurn = turn === \"P1\" ? \"P2\" : \"P1\";\n        this.setState({\n          selectedField: {},\n          turn: nextTurn\n        });\n        this.updateGameData();\n        this.loadBoard();\n      });\n    }\n  }\n\n  clickOnCanvas(event) {\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left - Config.boardTopx;\n    const y = event.clientY - rect.top - Config.boardTopy;\n    this.selectField((x - x % Config.squareSize) / Config.squareSize, (y - y % Config.squareSize) / Config.squareSize);\n  }\n\n  drawMethod() {\n    const {\n      width,\n      height,\n      boardView,\n      selectedField,\n      me,\n      pieceImagesSmall,\n      isInited,\n      winner,\n      pieceId,\n      selectedPiece,\n      pieceCard,\n      actions,\n      pieceImages,\n      engine,\n      matterBodies,\n      player1,\n      player2,\n      round,\n      seed,\n      version\n    } = this.state;\n\n    const draw = (ctx, frameCount) => {\n      if (boardView) {\n        const squareSize = Config.squareSize;\n        const boardTopx = Config.boardTopx;\n        const boardTopy = Config.boardTopy;\n        ctx.canvas.width = squareSize * (width + 1) + Config.card.width;\n        ctx.canvas.height = squareSize * (height + 1);\n\n        if (player1 !== null && player2 != null) {\n          ctx.font = \"10px Arial\";\n          let txt = player1.name + \"  vs.  \" + player2.name + \"       round: \" + Math.round(round / 2);\n          ctx.fillText(txt, boardTopx, boardTopy - 10);\n        }\n\n        ctx.font = \"10px Arial\";\n        let txt2 = \"seed: \" + seed + \"      version: \" + version;\n        ctx.fillText(txt2, boardTopx, ctx.canvas.height - 2); //draw card\n\n        if (pieceId !== \"\") {\n          var cardPicsize = Config.card.width;\n          var grd = ctx.createRadialGradient(squareSize * (width + 1) + cardPicsize / 2, 0 + cardPicsize * 0.625, 2, squareSize * (width + 1) + cardPicsize / 2, 0 + cardPicsize * 0.625, cardPicsize * 0.5);\n          grd.addColorStop(0, \"black\");\n\n          if (selectedPiece.owner === me) {\n            grd.addColorStop(1, \"rgba(0,170,0,0.1)\");\n          } else {\n            grd.addColorStop(1, \"rgba(170,0,0,0.1)\");\n          } // Fill with gradient\n\n\n          ctx.fillStyle = grd;\n          ctx.fillRect(squareSize * (width + 1), +cardPicsize * 0.125, cardPicsize, cardPicsize);\n          ctx.drawImage(pieceCard.drawPieceCard(actions.get(pieceId), pieceImages.get(pieceId), selectedPiece.owner, selectedPiece.king === true, selectedPiece.seed), squareSize * (width + 1), 0);\n        } //draw board\n\n\n        for (let i = 0; i < width; i++) {\n          for (let j = 0; j < height; j++) {\n            ctx.fillStyle = (i + j) % 2 === 0 ? Config.board.color1 : Config.board.color2;\n            let xOffset = boardTopx + i * squareSize;\n            let yOffset = boardTopy + j * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n          }\n        } // draw the border around the chessboard\n\n\n        ctx.strokeStyle = \"black\";\n        ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height);\n\n        if (JSON.stringify(selectedField) !== \"{}\") {\n          // draw moves\n          ctx.globalAlpha = 0.3 + 0.35 * (0.5 + 0.5 * Math.sin(new Date().getMilliseconds() * 0.02 * 3.141));\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"lightgreen\" : \"red\";\n\n          for (let k = 0; k < selectedPiece.possibleMoves.length; k++) {\n            let xOffset = boardTopx + selectedPiece.possibleMoves[k].x * squareSize;\n            let yOffset = boardTopy + selectedPiece.possibleMoves[k].y * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n          } //draw selected\n\n\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"green\" : \"darkred\";\n          ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n          ctx.globalAlpha = 1;\n        } // draw pieces\n\n\n        if (boardView[0] && isInited) {\n          ctx.fillStyle = \"black\";\n\n          for (let i = 0; i < width; i++) {\n            for (let j = 0; j < height; j++) {\n              if (boardView[j][i].symbol !== \"\") {\n                let xOffset = boardTopx + i * squareSize;\n                let yOffset = boardTopy + j * squareSize;\n                let xOffsetPic = boardTopx + (i + Config.board.smallImage.xOffset) * squareSize;\n                let yOffsetPic = boardTopy + (j + Config.board.smallImage.yOffset) * squareSize;\n\n                if (pieceImagesSmall.length !== 0) {\n                  //  console.log(pieces);\n                  //green or red shadow\n                  var grd = ctx.createRadialGradient(xOffset + squareSize / 2, yOffset + squareSize * 0.6, 2, xOffset + squareSize / 2, yOffset + squareSize * 0.6, squareSize * 0.5);\n                  grd.addColorStop(0, \"black\");\n\n                  if (boardView[j][i].owner === me) {\n                    grd.addColorStop(1, \"rgba(0,170,0,0.1)\");\n                  } else {\n                    grd.addColorStop(1, \"rgba(170,0,0,0.1)\");\n                  } // Fill with gradient\n\n\n                  ctx.fillStyle = grd;\n                  ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                  ctx.drawImage(pieceImagesSmall.get(boardView[j][i].symbol + boardView[j][i].owner), xOffsetPic, yOffsetPic);\n                }\n\n                if (boardView[j][i].king === true) {\n                  ctx.font = \"10px Arial\";\n                  ctx.fillStyle = \"#111111\";\n                  ctx.fillText(\"♔\", xOffset + 0.8 * squareSize, yOffset + squareSize / 6);\n                }\n              }\n            }\n          }\n        } //animation\n        //console.log(\"active bodies:\", matterBodies.length);\n\n\n        if (matterBodies.length != 0) {\n          if (winner !== null) {\n            this.endSequence = true;\n          }\n\n          RenderFunctions.renderMatterAnimation(ctx, matterBodies, frameCount);\n          matterBodies.forEach(b => {\n            if (b.alpha <= 0) {\n              Composite.remove(engine.world, b.body);\n              matterBodies.splice(matterBodies.indexOf(b), 1);\n            }\n          });\n        } // draw winner\n        //console.log(frameCount);\n\n\n        if (winner !== null && matterBodies.length === 0 && this.endSequence === true) {\n          ctx.fillStyle = \"rgba(100,100,100,0.7)\";\n          ctx.fillRect(boardTopx, boardTopy, squareSize * width, squareSize * height);\n          ctx.fillStyle = \"red\";\n          ctx.font = '30px arial';\n          ctx.fillText(winner.name + ' wins!', squareSize * width / 3, squareSize * height / 2);\n        }\n      }\n    };\n\n    return draw;\n  }\n\n  drawGameText() {\n    const {\n      me,\n      turn\n    } = this.state;\n\n    if (me === turn) {\n      return \"Your turn!\";\n    }\n\n    return \"Wait for opponents turn...\";\n  }\n\n  copyLink() {\n    const {\n      inviteLink\n    } = this.state;\n    navigator.clipboard.writeText(inviteLink);\n  }\n\n  openModal() {\n    this.setState({\n      open: true\n    });\n  }\n\n  closeModal() {\n    this.setState({\n      open: false\n    });\n  }\n\n  newGame() {\n    const {\n      history\n    } = this.props;\n    history.push(\"/\");\n  }\n\n  render() {\n    const {\n      player1,\n      player2,\n      round,\n      isInited,\n      winner,\n      open,\n      seed\n    } = this.state;\n\n    if (isInited) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"col-9\",\n            children: winner === null && this.drawGameText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ThemeProvider, {\n            theme: Design.theme1,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"col-3\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                onClick: this.copyLink,\n                color: \"neutral\",\n                children: \"Copy Invitelink\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 499,\n                columnNumber: 48\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"mb-5\",\n            children: /*#__PURE__*/_jsxDEV(Canvas, {\n              draw: this.drawMethod(),\n              onClick: this.clickOnCanvas\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 17\n      }, this);\n    }\n\n    return \"\";\n  }\n\n}\n\nexport default GameComponent;","map":{"version":3,"sources":["/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/src/game/game.component.jsx"],"names":["React","Component","mainService","Canvas","PieceGenerator","PieceCard","Config","RenderFunctions","serverConfig","Engine","Runner","Composite","Bodies","Body","Box","Button","Modal","ThemeProvider","Typography","Design","RandomGenerator","GameComponent","constructor","props","state","gameId","JSON","parse","localStorage","getItem","me","player","inviteLink","hostfe","seed","version","isInited","player1","player2","width","height","pieceImagesSmall","pieceImages","actions","pieceCard","boardData","boardView","turn","round","winner","graveyard","selectedField","selectedPiece","pieceId","engine","create","matterBodies","showAnimation","open","endSequence","run","gravity","y","timing","timeScale","selectField","bind","clickOnCanvas","drawMethod","play","loadBoard","loadPieceData","createMatterBodies","copyLink","newGame","closeModal","openModal","componentDidMount","loadTimer","setInterval","updateGameData","updateInterval","getGameData","then","res","setState","data","getBoard","bv","createBoard","board","Map","i","length","j","symbol","get","undefined","pg","squareSize","smallImage","wScale","hScale","set","owner","drawPieceCanvas","lvl","generatePiece","res2","card","imageWidth","imageHeight","actionMap","matterBodiesUpdate","deletedPieces","slice","size","forEach","b","add","world","body","push","piece","xOffsetPic","boardTopx","position","x","xOffset","yOffsetPic","boardTopy","yOffset","getMatterBodies","translate","ground","rectangle","isStatic","color","alpha","visible","possibleMoves","serial","king","isPlayerTurn","isEmptyField","sthSelected","stringify","isAlreadySelected","isPossibleMove","some","move","isOwnSelected","draw","fromPos","toPos","playSound","pieces","nextTurn","event","rect","target","getBoundingClientRect","clientX","left","clientY","top","ctx","frameCount","canvas","font","txt","name","Math","fillText","txt2","cardPicsize","grd","createRadialGradient","addColorStop","fillStyle","fillRect","drawImage","drawPieceCard","color1","color2","strokeStyle","strokeRect","globalAlpha","sin","Date","getMilliseconds","k","renderMatterAnimation","remove","splice","indexOf","drawGameText","navigator","clipboard","writeText","history","render","theme1"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mainService from '../services/main.service';\nimport Canvas from '../components/canvas.component';\nimport PieceGenerator from '../components/generator/piece-generator';\nimport PieceCard from './piece-card';\nimport Config from \"./config.json\";\nimport RenderFunctions from \"./render-functions.js\";\nimport serverConfig from \"../services/server-config.json\";\nimport { Engine, Runner, Composite, Bodies, Body } from 'matter-js';\nimport { Box, Button, Modal, ThemeProvider, Typography } from '@mui/material';\nimport Design from './themes/Design';\nimport RandomGenerator from '../components/generator/random-generator';\n\nclass GameComponent extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            me: JSON.parse(localStorage.getItem(\"auth\")).player,\n            inviteLink: serverConfig.hostfe + \"/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            seed: JSON.parse(localStorage.getItem(\"auth\")).seed,\n            version: JSON.parse(localStorage.getItem(\"auth\")).version,\n            //updater\n            isInited: false,\n\n\n            //game consts\n            player1: null,\n            player2: null,\n            width: 16,\n            height: 16,\n            pieceImagesSmall: {}, // images of pieces\n\n            //pieceData for cards\n            pieceImages: {}, //cardImages of pieces\n            actions: {}, // actions of pieces\n            pieceCard: new PieceCard(),\n\n            // game state\n            boardData: {}, // data from server\n            boardView: {}, // symbol, playertype\n            turn: \"undef\",\n            round: 0,\n            winner: null,\n            graveyard: [],\n\n            //selection\n            selectedField: {},\n            selectedPiece: {},\n            pieceId: \"\",\n\n\n            //animation with matter.js\n            engine: Engine.create(),\n            matterBodies: [],\n            showAnimation: false,\n\n            //newGame Modal\n            open: false,\n\n\n        }\n        //endanimation\n        this.endSequence = false;\n\n        //matter.js init\n        //start matter.js runner\n        Runner.run(Runner.create(), this.state.engine);\n\n        //this.state.engine.gravity.scale = 0.00;\n        this.state.engine.gravity.y = 0.6;\n        this.state.engine.timing.timeScale = 0.8;\n\n        this.selectField = this.selectField.bind(this);\n        this.clickOnCanvas = this.clickOnCanvas.bind(this);\n        this.drawMethod = this.drawMethod.bind(this);\n        this.play = this.play.bind(this);\n        this.loadBoard = this.loadBoard.bind(this);\n        this.loadPieceData = this.loadPieceData.bind(this);\n        this.createMatterBodies = this.createMatterBodies.bind(this);\n        this.copyLink = this.copyLink.bind(this);\n        this.newGame = this.newGame.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.openModal = this.openModal.bind(this);\n\n\n    }\n\n    componentDidMount() {\n        const { isInited } = this.state;\n\n        //Init function \n        if (!isInited) {\n            this.loadPieceData();\n        }\n\n        //start updater\n        const loadTimer = setInterval(() => {\n            this.updateGameData();\n\n        }, Config.updateInterval);\n    }\n\n    //check for ugameupdate\n    updateGameData() {\n        const { gameId, turn } = this.state;\n        mainService.getGameData(gameId).then((res) => {\n\n            this.setState({ player1: res.data.player1, player2: res.data.player2, turn: res.data.turn, round: res.data.round, winner: res.data.winner });\n            //when other player made his turn\n            if (turn !== res.data.turn) {\n\n                this.loadBoard();\n            }\n            //console.log(res.data.winner);\n            //check game end ?\n        });\n    }\n\n\n    // initial creating piece graphics\n    loadPieceData() {\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv = this.createBoard(res.data.board);\n            var pieceImagesSmall = new Map();\n            var actions = new Map();\n            var pieceImages = new Map();\n            for (let i = 0; i < bv.length; i++) {\n                for (let j = 0; j < bv[0].length; j++) {\n                    if (bv[i][j].symbol !== \"\" && pieceImagesSmall.get(bv[i][j].symbol) === undefined) {\n                        var pg = new PieceGenerator(Config.squareSize * Config.board.smallImage.wScale, Config.squareSize * Config.board.smallImage.hScale, bv[i][j].seed);\n                        pieceImagesSmall.set(bv[i][j].symbol + bv[i][j].owner, pg.drawPieceCanvas(bv[i][j].owner, bv[i][j].lvl));\n\n                        mainService.generatePiece(bv[i][j].seed).then(res2 => {\n                            var pg = new PieceGenerator(Config.card.imageWidth, Config.card.imageHeight, \"\" + bv[i][j].seed);\n                            pieceImages.set(bv[i][j].symbol + bv[i][j].owner, pg.drawPieceCanvas(bv[i][j].owner, bv[i][j].lvl))\n                            actions.set(bv[i][j].symbol + bv[i][j].owner, res2.data.actionMap.actions);\n                        });\n                    }\n                }\n            }\n            //TODO: alternativer RestRequest um gleich alle pieceData zu bekommen\n\n            this.setState({ pieceImagesSmall: pieceImagesSmall, actions: actions, pieceImages: pieceImages, isInited: true, boardView: bv, width: bv[0].length, height: bv.length });\n        });\n    }\n\n    //update Board\n    loadBoard() {\n        const { gameId, graveyard, engine, matterBodies, showAnimation } = this.state;\n        var matterBodiesUpdate = matterBodies;\n        mainService.getBoard(gameId).then((res) => {\n            //List of deleted pieces TODO: what is if page reloaded and graveyard at first empty -> many animations at start ?\n\n            let deletedPieces = res.data.graveyard.slice(graveyard.length, res.data.graveyard.size);\n\n            //matter bodies create, add forces and composite\n            if (showAnimation) {\n\n                if (deletedPieces.length !== 0) {\n                    this.createMatterBodies(deletedPieces).forEach(b => {\n                        Composite.add(engine.world, b.body);\n                        matterBodiesUpdate.push(b);\n                    });\n                }\n            } else {\n                this.setState({ showAnimation: true });\n            }\n\n            let bv = this.createBoard(res.data.board);\n            this.setState({ boardData: res.data, boardView: bv, graveyard: res.data.graveyard, matterBodies: matterBodiesUpdate, width: bv[0].length, height: bv.length });\n        });\n    }\n\n    createMatterBodies(deletedPieces) {\n        const { width, engine } = this.state;\n        var matterBodies = [];\n        deletedPieces.forEach(piece => {\n            //create body\n            var pg = new PieceGenerator(Config.squareSize * Config.board.smallImage.wScale, Config.squareSize * Config.board.smallImage.hScale, piece.seed);\n            let xOffsetPic = Config.boardTopx + (piece.position.x + Config.board.smallImage.xOffset) * Config.squareSize;\n            let yOffsetPic = Config.boardTopy + (piece.position.y + Config.board.smallImage.yOffset) * Config.squareSize;\n\n            pg.getMatterBodies().forEach(b => {\n                Body.translate(b.body, { x: xOffsetPic, y: yOffsetPic });\n                matterBodies.push(b);\n            });\n            var ground = Bodies.rectangle(0, yOffsetPic + Config.squareSize * 0.7, 21300, 2, { isStatic: true });\n            matterBodies.push({ body: ground, color: \"black\", alpha: 1.0, visible: false });\n        });\n\n        return matterBodies;\n\n    }\n\n\n    // save Board data\n    createBoard(board) {\n        let bv = board;\n        for (let i = 0; i < bv.length; i++) {\n            for (let j = 0; j < bv[0].length; j++) {\n                if (board[i][j] === null) {\n                    bv[i][j] = {\n                        symbol: \"\",\n                        owner: \"\",\n                        possibleMoves: [],\n                        serial: \"\"\n                    };\n                } else {\n                    bv[i][j] = {\n                        lvl: bv[i][j].lvl,\n                        symbol: bv[i][j].symbol,\n                        owner: bv[i][j].owner,\n                        possibleMoves: bv[i][j].possibleMoves,\n                        serial: bv[i][j].serial,\n                        seed: bv[i][j].seed,\n                        king: bv[i][j].king\n                    };\n                }\n            }\n        }\n        return bv;\n    }\n\n\n    selectField(x, y) {\n        const { boardView, selectedField, me, turn, selectedPiece } = this.state;\n        const isPlayerTurn = me === turn;\n        const isEmptyField = boardView[y][x].symbol === \"\";\n        const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n        if (sthSelected) {\n            const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n            const isPossibleMove = selectedPiece.possibleMoves.some(move => move.x === x && move.y === y);\n            const isOwnSelected = me === boardView[selectedField.y][selectedField.x].owner;\n\n            // move,unselect, another select ?\n\n            if (isAlreadySelected) {\n                // unselect\n                this.setState({\n                    selectedField: {},\n                    pieceId: \"\"\n                });\n            } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n                // move\n                const draw = { fromPos: { x: selectedField.x, y: selectedField.y }, toPos: { x: x, y: y } }\n                this.play(draw);\n            } else if (isEmptyField) {\n                // unselect\n                this.setState({\n                    selectedField: {},\n                    pieceId: \"\"\n                });\n            } else {\n                // select new position\n                this.setState({\n                    selectedField: { x: x, y: y },\n                    selectedPiece: boardView[y][x],\n                    pieceId: boardView[y][x].symbol + boardView[y][x].owner //TODO: statt symbol pieceId\n                });\n            }\n        } else {\n            if (!isEmptyField) {\n                // select new position\n                this.setState({\n                    selectedField: { x: x, y: y },\n                    selectedPiece: boardView[y][x],\n                    pieceId: boardView[y][x].symbol + boardView[y][x].owner //TODO: statt symbol pieceId\n                });\n            }\n        }\n    }\n\n\n    playSound(pieces) {\n        // for (var i = 0; i < pieces.length; i++) {\n        //     var gen = new RandomGenerator(pieces[i].id + \"\");\n        //     this.midiSounds.playDrumsAt(this.midiSounds.contextTime(), [Math.floor(gen.random() * 230), Math.floor(gen.random() * 230), Math.floor(gen.random() * 230)]);\n        // }\n    }\n\n    play(draw) {\n        const { gameId, turn, winner } = this.state;\n        if (winner === null) {\n            mainService.play(gameId, draw).then((res) => {\n                //            console.log(\"played\", turn);\n                const nextTurn = (turn === \"P1\") ? \"P2\" : \"P1\";\n                this.setState({\n                    selectedField: {},\n                    turn: nextTurn\n                });\n\n                this.updateGameData();\n                this.loadBoard();\n            });\n        }\n    }\n\n\n\n\n    clickOnCanvas(event) {\n        const rect = event.target.getBoundingClientRect();\n        const x = event.clientX - rect.left - Config.boardTopx;\n        const y = event.clientY - rect.top - Config.boardTopy;\n        this.selectField((x - x % Config.squareSize) / (Config.squareSize), (y - y % Config.squareSize) / (Config.squareSize));\n    }\n\n    drawMethod() {\n        const { width, height, boardView, selectedField, me, pieceImagesSmall, isInited, winner, pieceId, selectedPiece, pieceCard, actions, pieceImages, engine, matterBodies, player1, player2, round, seed, version } = this.state;\n\n\n        const draw = (ctx, frameCount) => {\n            if (boardView) {\n                const squareSize = Config.squareSize;\n                const boardTopx = Config.boardTopx;\n                const boardTopy = Config.boardTopy;\n\n                ctx.canvas.width = squareSize * (width + 1) + Config.card.width;\n                ctx.canvas.height = squareSize * (height + 1);\n\n                if (player1 !== null && player2 != null) {\n                    ctx.font = \"10px Arial\";\n                    let txt = player1.name + \"  vs.  \" + player2.name + \"       round: \" + Math.round(round / 2);\n\n                    ctx.fillText(txt, boardTopx, boardTopy - 10);\n                }\n                ctx.font = \"10px Arial\";\n                let txt2 = \"seed: \" + seed + \"      version: \" + version;\n                ctx.fillText(txt2, boardTopx, ctx.canvas.height - 2);\n\n                //draw card\n                if (pieceId !== \"\") {\n                    var cardPicsize = Config.card.width;\n                    var grd = ctx.createRadialGradient(squareSize * (width + 1) + cardPicsize / 2, 0 + cardPicsize * 0.625, 2, squareSize * (width + 1) + cardPicsize / 2, 0 + cardPicsize * 0.625, cardPicsize * 0.5);\n                    grd.addColorStop(0, \"black\");\n                    if (selectedPiece.owner === me) {\n                        grd.addColorStop(1, \"rgba(0,170,0,0.1)\");\n                    } else {\n                        grd.addColorStop(1, \"rgba(170,0,0,0.1)\");\n                    }\n                    // Fill with gradient\n                    ctx.fillStyle = grd;\n                    ctx.fillRect(squareSize * (width + 1), + cardPicsize * 0.125, cardPicsize, cardPicsize);\n\n                    ctx.drawImage(pieceCard.drawPieceCard(actions.get(pieceId), pieceImages.get(pieceId), selectedPiece.owner, selectedPiece.king === true, selectedPiece.seed), squareSize * (width + 1), 0);\n                }\n\n                //draw board\n                for (let i = 0; i < width; i++) {\n                    for (let j = 0; j < height; j++) {\n                        ctx.fillStyle = ((i + j) % 2 === 0) ? Config.board.color1 : Config.board.color2;\n                        let xOffset = boardTopx + i * squareSize;\n                        let yOffset = boardTopy + j * squareSize;\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n                }\n                // draw the border around the chessboard\n                ctx.strokeStyle = \"black\";\n                ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height)\n\n\n                if (JSON.stringify(selectedField) !== \"{}\") {\n                    // draw moves\n                    ctx.globalAlpha = 0.3 + 0.35 * (0.5 + 0.5 * Math.sin((new Date()).getMilliseconds() * 0.02 * 3.141));\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"lightgreen\" : \"red\";\n                    for (let k = 0; k < selectedPiece.possibleMoves.length; k++) {\n                        let xOffset = boardTopx + selectedPiece.possibleMoves[k].x * squareSize;\n                        let yOffset = boardTopy + selectedPiece.possibleMoves[k].y * squareSize;\n\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n\n                    //draw selected\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"green\" : \"darkred\";\n                    ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n                    ctx.globalAlpha = 1;\n                }\n\n                // draw pieces\n                if (boardView[0] && isInited) {\n                    ctx.fillStyle = \"black\";\n\n                    for (let i = 0; i < width; i++) {\n                        for (let j = 0; j < height; j++) {\n                            if (boardView[j][i].symbol !== \"\") {\n\n                                let xOffset = boardTopx + i * squareSize;\n                                let yOffset = boardTopy + j * squareSize;\n                                let xOffsetPic = boardTopx + (i + Config.board.smallImage.xOffset) * squareSize;\n                                let yOffsetPic = boardTopy + (j + Config.board.smallImage.yOffset) * squareSize;\n\n                                if (pieceImagesSmall.length !== 0) {\n                                    //  console.log(pieces);\n\n\n                                    //green or red shadow\n                                    var grd = ctx.createRadialGradient(xOffset + squareSize / 2, yOffset + squareSize * 0.6, 2, xOffset + squareSize / 2, yOffset + squareSize * 0.6, squareSize * 0.5);\n                                    grd.addColorStop(0, \"black\");\n                                    if (boardView[j][i].owner === me) {\n                                        grd.addColorStop(1, \"rgba(0,170,0,0.1)\");\n                                    } else {\n                                        grd.addColorStop(1, \"rgba(170,0,0,0.1)\");\n                                    }\n                                    // Fill with gradient\n                                    ctx.fillStyle = grd;\n                                    ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n\n                                    ctx.drawImage(pieceImagesSmall.get(boardView[j][i].symbol + boardView[j][i].owner), xOffsetPic, yOffsetPic);\n                                }\n                                if (boardView[j][i].king === true) {\n                                    ctx.font = \"10px Arial\";\n                                    ctx.fillStyle = \"#111111\";\n                                    ctx.fillText(\"♔\", xOffset + 0.8 * squareSize, yOffset + squareSize / 6);\n                                }\n\n                            }\n                        }\n                    }\n                }\n                //animation\n                //console.log(\"active bodies:\", matterBodies.length);\n                if (matterBodies.length != 0) {\n                    if (winner !== null) {\n                        this.endSequence = true;\n                    }\n                    RenderFunctions.renderMatterAnimation(ctx, matterBodies, frameCount);\n                    matterBodies.forEach(b => {\n                        if (b.alpha <= 0) {\n                            Composite.remove(engine.world, b.body);\n                            matterBodies.splice(matterBodies.indexOf(b), 1);\n                        }\n                    })\n\n                }\n\n\n\n                // draw winner\n                //console.log(frameCount);\n                if (winner !== null && matterBodies.length === 0 && this.endSequence === true) {\n                    ctx.fillStyle = \"rgba(100,100,100,0.7)\"\n                    ctx.fillRect(boardTopx, boardTopy, squareSize * width, squareSize * height)\n\n                    ctx.fillStyle = \"red\"\n                    ctx.font = '30px arial';\n                    ctx.fillText(winner.name + ' wins!', squareSize * width / 3, squareSize * height / 2);\n                }\n\n            }\n        }\n        return draw;\n\n    }\n\n    drawGameText() {\n        const { me, turn } = this.state;\n        if (me === turn) {\n            return \"Your turn!\";\n        }\n        return \"Wait for opponents turn...\";\n    }\n\n    copyLink() {\n        const { inviteLink } = this.state;\n        navigator.clipboard.writeText(inviteLink);\n    }\n\n    openModal() {\n        this.setState({ open: true });\n    }\n\n    closeModal() {\n        this.setState({ open: false });\n    }\n\n    newGame() {\n        const { history } = this.props;\n\n        history.push(\"/\");\n    }\n\n\n    render() {\n        const { player1, player2, round, isInited, winner, open, seed } = this.state;\n\n        if (isInited) {\n            return (\n                <div>\n                    <div class=\"row\">\n                        <div class=\"col-9\">\n                            {winner === null && this.drawGameText()}\n                        </div>\n                        <ThemeProvider theme={Design.theme1}>\n                            <div class=\"col-3\"><Button variant=\"outlined\" onClick={this.copyLink} color=\"neutral\">Copy Invitelink</Button></div>\n                        </ThemeProvider>\n\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"mb-5\">\n                            <Canvas draw={this.drawMethod()} onClick={this.clickOnCanvas} />\n\n                        </div>\n                    </div >\n                </div >\n            )\n        }\n        return \"\";\n    }\n}\n\nexport default GameComponent"]},"metadata":{},"sourceType":"module"}