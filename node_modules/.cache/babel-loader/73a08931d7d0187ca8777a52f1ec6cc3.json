{"ast":null,"code":"import Config from \"./config.json\";\n\nclass PieceCard {\n  constructor() {\n    this.canvas = document.createElement('canvas');\n    this.ctx = this.canvas.getContext('2d');\n    this.canvas.width = Config.card.width;\n    this.canvas.height = Config.card.height;\n  }\n\n  drawCanvas(actions, pieceImage, owner, isKing) {\n    const actionsSize = Config.card.actionsSize;\n    const actionsOffsetX = Config.card.actionsOffsetX;\n    const actionsOffsetY = Config.card.actionsOffsetY;\n    var ctx = this.ctx;\n\n    if (actions !== undefined) {\n      ctx.canvas.width = Config.card.width;\n      ctx.canvas.height = Config.card.height;\n      ctx.drawImage(pieceImage, 32, 10); // draw actions\n\n      var actionLegend = [];\n\n      for (var i = 0; i < actions.length; i++) {\n        for (var j = 0; j < actions[0].length; j++) {\n          if (actions[i][j] !== \"-\") {\n            var offsetY;\n\n            if (owner === \"P1\") {\n              offsetY = actionsOffsetY + (actions[0].length - 1 - j) * actionsSize;\n            } else {\n              offsetY = actionsOffsetY + j * actionsSize;\n            }\n\n            if (!actionLegend.includes(actions[i][j])) {\n              actionLegend.push(actions[i][j]);\n            }\n\n            ctx.fillStyle = this.mapActionToColor(actions[i][j]);\n            ctx.fillRect(actionsOffsetX + i * actionsSize, offsetY, actionsSize, actionsSize);\n          }\n        }\n      }\n\n      ctx.lineWidth = 0.5;\n      ctx.strokeStyle = \"#AAAAAA\";\n\n      for (i = 0; i < actions.length + 1; i++) {\n        //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + actions.length + 1 * actionsSize);\n        //console.log(i);\n        ctx.beginPath();\n        ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n        ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + actions.length * actionsSize);\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n        ctx.lineTo(actionsOffsetX + actions.length * actionsSize, actionsOffsetY + i * actionsSize);\n        ctx.stroke();\n      }\n\n      if (isKing) {\n        ctx.font = \"20px Arial\";\n        ctx.fillStyle = \"#111111\";\n        ctx.fillText(\"â™”\", this.canvas.width - 20, 37);\n      }\n    } // Legend\n\n\n    for (i = 0; i < actionLegend.length; i++) {\n      ctx.fillStyle = this.mapActionToColor(actionLegend[i]); //console.log(actionLegend[i]);\n\n      ctx.fillRect(actionsOffsetX, actionsOffsetY + actions.length * actionsSize + (i + 1) * 2 * actionsSize, actionsSize, actionsSize);\n      ctx.font = \"10px Arial\";\n      ctx.fillText(this.mapActionToText(actionLegend[i]), actionsOffsetX + actionsSize * 2, actionsOffsetY + actions.length * actionsSize + (i + 1) * 2 * actionsSize + actionsSize);\n    }\n  }\n\n  mapActionToColor(str) {\n    if (str === \"P\") {\n      return \"#11AA11\";\n    } else if (str === \"E\") {\n      return \"#BBBB11\";\n    } else if (str === \"F\") {\n      return \"#1111BB\";\n    } else if (str === \"M\") {\n      return \"#11BBBB\";\n    } else if (str === \"S\") {\n      return \"#BB55BB\";\n    } else if (str === \"R\") {\n      return \"#BB1111\";\n    } else if (str === \"C\") {\n      return \"#BB9988\";\n    } else {\n      return \"#666666\";\n    }\n  }\n\n  mapActionToText(str) {\n    if (str === \"P\") {\n      return \"piece location\";\n    } else if (str === \"E\") {\n      return \"attack only\";\n    } else if (str === \"F\") {\n      return \"move only\";\n    } else if (str === \"M\") {\n      return \"walk a way\";\n    } else if (str === \"S\") {\n      return \"swap positions\";\n    } else if (str === \"R\") {\n      return \"rush\";\n    } else if (str === \"C\") {\n      return \"cross attack\";\n    } else {\n      return \"attack or just move\";\n    }\n  }\n\n  drawPieceCard(actions, pieceImage, owner, isKing) {\n    this.drawCanvas(actions, pieceImage, owner, isKing);\n    return this.canvas;\n  }\n\n}\n\nexport default PieceCard;","map":{"version":3,"sources":["/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/src/game/piece-card.jsx"],"names":["Config","PieceCard","constructor","canvas","document","createElement","ctx","getContext","width","card","height","drawCanvas","actions","pieceImage","owner","isKing","actionsSize","actionsOffsetX","actionsOffsetY","undefined","drawImage","actionLegend","i","length","j","offsetY","includes","push","fillStyle","mapActionToColor","fillRect","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","font","fillText","mapActionToText","str","drawPieceCard"],"mappings":"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","sourcesContent":["import Config from \"./config.json\";\n\nclass PieceCard {\n\n    constructor() {\n        this.canvas = document.createElement('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.canvas.width = Config.card.width;\n        this.canvas.height = Config.card.height;\n    }\n\n    drawCanvas(actions, pieceImage, owner, isKing) {\n        const actionsSize = Config.card.actionsSize;\n        const actionsOffsetX = Config.card.actionsOffsetX;\n        const actionsOffsetY = Config.card.actionsOffsetY;\n        var ctx = this.ctx;\n\n        if (actions !== undefined) {\n            ctx.canvas.width = Config.card.width;\n            ctx.canvas.height = Config.card.height;\n\n            ctx.drawImage(pieceImage, 32, 10);\n\n            // draw actions\n\n            var actionLegend = [];\n\n            for (var i = 0; i < actions.length; i++) {\n                for (var j = 0; j < actions[0].length; j++) {\n                    if (actions[i][j] !== \"-\") {\n                        var offsetY;\n                        if (owner === \"P1\") {\n                            offsetY = actionsOffsetY + (actions[0].length - 1 - j) * actionsSize;\n                        } else {\n                            offsetY = actionsOffsetY + j * actionsSize\n                        }\n                        if (!actionLegend.includes(actions[i][j])) {\n                            actionLegend.push(actions[i][j]);\n                        }\n                        ctx.fillStyle = this.mapActionToColor(actions[i][j]);\n                        ctx.fillRect(actionsOffsetX + i * actionsSize, offsetY, actionsSize, actionsSize);\n                    }\n                }\n            }\n\n\n            ctx.lineWidth = 0.5;\n            ctx.strokeStyle = \"#AAAAAA\";\n            for (i = 0; i < actions.length + 1; i++) {\n                //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + actions.length + 1 * actionsSize);\n                //console.log(i);\n\n                ctx.beginPath();\n                ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n                ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + (actions.length) * actionsSize);\n                ctx.stroke();\n\n                ctx.beginPath();\n                ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n                ctx.lineTo(actionsOffsetX + (actions.length) * actionsSize, actionsOffsetY + i * actionsSize);\n                ctx.stroke();\n            }\n\n            if (isKing) {\n                ctx.font = \"20px Arial\";\n                ctx.fillStyle = \"#111111\";\n                ctx.fillText(\"â™”\", this.canvas.width - 20, 37);\n            }\n        }\n        // Legend\n        for (i = 0; i < actionLegend.length; i++) {\n            ctx.fillStyle = this.mapActionToColor(actionLegend[i]);\n            //console.log(actionLegend[i]);\n            ctx.fillRect(actionsOffsetX, actionsOffsetY + actions.length * actionsSize + (i + 1) * 2 * actionsSize, actionsSize, actionsSize);\n            ctx.font = \"10px Arial\";\n            ctx.fillText(this.mapActionToText(actionLegend[i]), actionsOffsetX + actionsSize * 2, actionsOffsetY + actions.length * actionsSize + (i + 1) * 2 * actionsSize + actionsSize);\n\n        }\n\n    }\n\n\n    mapActionToColor(str) {\n        if (str === \"P\") {\n            return \"#11AA11\";\n        } else if (str === \"E\") {\n            return \"#BBBB11\";\n        } else if (str === \"F\") {\n            return \"#1111BB\";\n        } else if (str === \"M\") {\n            return \"#11BBBB\";\n        } else if (str === \"S\") {\n            return \"#BB55BB\";\n        } else if (str === \"R\") {\n            return \"#BB1111\";\n        } else if (str === \"C\") {\n            return \"#BB9988\";\n        } else {\n            return \"#666666\";\n        }\n    }\n\n    mapActionToText(str) {\n        if (str === \"P\") {\n            return \"piece location\";\n        } else if (str === \"E\") {\n            return \"attack only\";\n        } else if (str === \"F\") {\n            return \"move only\";\n        } else if (str === \"M\") {\n            return \"walk a way\";\n        } else if (str === \"S\") {\n            return \"swap positions\";\n        } else if (str === \"R\") {\n            return \"rush\";\n        } else if (str === \"C\") {\n            return \"cross attack\";\n        } else {\n            return \"attack or just move\";\n        }\n    }\n\n    drawPieceCard(actions, pieceImage, owner, isKing) {\n        this.drawCanvas(actions, pieceImage, owner, isKing);\n        return (\n            this.canvas\n        );\n    }\n\n}\nexport default PieceCard;"]},"metadata":{},"sourceType":"module"}