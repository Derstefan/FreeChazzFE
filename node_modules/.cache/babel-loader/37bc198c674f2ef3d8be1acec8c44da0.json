{"ast":null,"code":"import { Component } from 'react';\nimport RandomGenerator from './random-generator';\nimport UtilFunctions from './util-functions';\nimport { Bodies } from 'matter-js';\n\nclass PieceGenerator {\n  constructor(width, height, seedstr) {\n    this.gen = new RandomGenerator(seedstr);\n    this.width = width;\n    this.height = height;\n    this.canvas2 = document.createElement('canvas');\n    this.c2 = this.canvas2.getContext('2d');\n    this.canvas2.width = width;\n    this.canvas2.height = height;\n    this.matterBodies = [];\n    this.owner = \"P1\";\n    this.lvl = 5;\n  }\n\n  randomColor() {\n    var r, g, b;\n\n    if (this.owner === \"P1\") {\n      r = Math.floor(this.gen.random() * 165 + 65).toString(16);\n      g = Math.floor(this.gen.random() * 165 + 65).toString(16);\n      b = Math.floor(this.gen.random() * 165 + 65).toString(16);\n      return \"#\" + r + g + b;\n    }\n\n    r = Math.floor(this.gen.random() * 165 + 10).toString(16);\n    g = Math.floor(this.gen.random() * 165 + 10).toString(16);\n    b = Math.floor(this.gen.random() * 165 + 10).toString(16);\n    return \"#\" + r + g + b;\n  }\n\n  randomPoints(num) {\n    var points = [];\n\n    for (var i = 0; i < num; i++) {\n      var x = this.gen.randNumOfRange(0, this.width);\n      var y = this.gen.randNumOfRange(0, this.height);\n      points.push({\n        x: x,\n        y: y\n      });\n    } // TODO: check if some area is there\n    // let area = UtilFunctions.polygonArea(points);\n    // if (area < 4) {\n    //     console.log(points);\n    //     points = this.randomPoints(num);\n    // }\n\n\n    return points;\n  }\n\n  drawShape(points) {\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      if (i === 0) {\n        shape.moveTo(points[i].x, points[i].y);\n      } else {\n        shape.lineTo(points[i].x, points[i].y);\n      }\n    }\n\n    return shape;\n  }\n\n  drawMirrorShape(points) {\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      var x = this.width - points[i].x;\n\n      if (i === 0) {\n        shape.moveTo(x, points[i].y);\n      } else {\n        shape.lineTo(x, points[i].y);\n      }\n    }\n\n    return shape;\n  }\n\n  drawCurvedShape(points) {\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      if (i === 0) {\n        shape.moveTo(points[i].x, points[i].y);\n      } else if (i % 2 === 0) {\n        shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y);\n      }\n    }\n\n    return shape;\n  }\n\n  drawCurvedMirrorShape(points) {\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      var x = this.width - points[i].x;\n\n      if (i === 0) {\n        shape.moveTo(x, points[i].y);\n      } else if (i % 2 === 0) {\n        var x1 = this.width - points[i - 1].x;\n        var x2 = this.width - points[i].x;\n        shape.quadraticCurveTo(x1, points[i - 1].y, x2, points[i].y);\n      }\n    }\n\n    return shape;\n  } // ----------------------------------------------------------------------------------------------------------------\n\n\n  drawCurvedMirroredPolygon() {\n    var pointNumber = this.gen.randNumOfRange(3, this.mapPolygonMaxSize(this.lvl).number);\n    var points = this.randomPoints(pointNumber); //console.log(UtilFunctions.polygonArea(points));\n\n    var color = this.randomColor();\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawCurvedShape(points));\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawCurvedMirrorShape(points));\n  }\n\n  drawMirroredPolygon() {\n    var pointNumber = this.gen.randNumOfRange(3, this.mapPolygonMaxSize(this.lvl).number);\n    var points = this.randomPoints(pointNumber);\n\n    while (UtilFunctions.polygonArea(points) < 6.0) {\n      points = this.randomPoints(pointNumber);\n    }\n\n    var color = this.randomColor();\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawShape(points));\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawMirrorShape(points));\n    this.addBodies(points, color);\n    var points2 = points;\n    points2.forEach(p => {\n      p.x = this.width - p.x;\n    });\n    this.addBodies(points2, color);\n  }\n\n  drawCurvedMirroredPolygonColorDiff() {\n    var pointNumber = this.gen.randNumOfRange(3, this.mapPolygonMaxSize(this.lvl).number);\n    var points = this.randomPoints(pointNumber);\n    var color = this.randomColor();\n    var color2 = this.randomColor();\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawCurvedShape(points));\n    this.c2.fillStyle = color2;\n    this.c2.fill(this.drawCurvedMirrorShape(points));\n  }\n\n  drawMirroredPolygonColorDiff() {\n    var pointNumber = this.gen.randNumOfRange(3, this.mapPolygonMaxSize(this.lvl).number);\n    var points = this.randomPoints(pointNumber);\n    var color = this.randomColor();\n    var color2 = this.randomColor();\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawShape(points));\n    this.c2.fillStyle = color2;\n    this.c2.fill(this.drawMirrorShape(points));\n    this.addBodies(points, color);\n    var points2 = points;\n    points2.forEach(p => {\n      p.x = this.width - p.x;\n    });\n    this.addBodies(points2, color2);\n  } //sort points in y direction\n\n\n  sortPoints(points) {\n    return points.sort((a, b) => a.y > b.y ? 1 : -1);\n  }\n\n  addBodies(points, color) {\n    var pointList = this.sortPoints(points);\n\n    for (var i = 2; i < pointList.length; i++) {\n      var body = Bodies.fromVertices(0, 0, [points[i - 2], points[i - 1], points[i]]);\n\n      if (body.vertices.length >= 3) {\n        body.torque = 0.05;\n        this.matterBodies.push({\n          body: body,\n          color: color,\n          alpha: 1.0\n        });\n      }\n    }\n  }\n\n  drawPolygons(num) {\n    return [...Array(num).keys()].map(() => this.gen.random() > 0.05 ? this.drawMirroredPolygon() : this.drawMirroredPolygonColorDiff());\n  }\n\n  getMatterBodies() {\n    this.drawPolygons(this.gen.randNumOfRange(3, this.mapPolygonMaxSize(this.lvl).corner));\n    return this.matterBodies;\n  }\n\n  drawPieceCanvas(owner, lvl) {\n    this.owner = owner;\n    this.lvl = lvl;\n    ;\n    this.drawPolygons(this.gen.randNumOfRange(3, this.mapPolygonMaxSize(lvl).corner));\n    return this.canvas2;\n  }\n\n  mapPolygonMaxSize(lvl) {\n    switch (lvl) {\n      case 1:\n        return {\n          corner: 6,\n          number: 3\n        };\n\n      case 2:\n        return {\n          corner: 6,\n          number: 3\n        };\n\n      case 3:\n        return {\n          corner: 6,\n          number: 4\n        };\n\n      case 4:\n        return {\n          corner: 8,\n          number: 4\n        };\n\n      case 5:\n        return {\n          corner: 10,\n          number: 5\n        };\n\n      default:\n        return {\n          corner: 5,\n          number: 3\n        };\n    }\n  }\n\n}\n\nexport default PieceGenerator;","map":{"version":3,"sources":["/home/ich/Entwicklung/FreeChazz/repos/FreeChazzFE/src/components/generator/piece-generator.jsx"],"names":["Component","RandomGenerator","UtilFunctions","Bodies","PieceGenerator","constructor","width","height","seedstr","gen","canvas2","document","createElement","c2","getContext","matterBodies","owner","lvl","randomColor","r","g","b","Math","floor","random","toString","randomPoints","num","points","i","x","randNumOfRange","y","push","drawShape","shape","Path2D","length","moveTo","lineTo","drawMirrorShape","drawCurvedShape","quadraticCurveTo","drawCurvedMirrorShape","x1","x2","drawCurvedMirroredPolygon","pointNumber","mapPolygonMaxSize","number","color","fillStyle","fill","drawMirroredPolygon","polygonArea","addBodies","points2","forEach","p","drawCurvedMirroredPolygonColorDiff","color2","drawMirroredPolygonColorDiff","sortPoints","sort","a","pointList","body","fromVertices","vertices","torque","alpha","drawPolygons","Array","keys","map","getMatterBodies","corner","drawPieceCanvas"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport RandomGenerator from './random-generator';\nimport UtilFunctions from './util-functions';\nimport { Bodies } from 'matter-js';\n\nclass PieceGenerator {\n\n    constructor(width, height, seedstr) {\n        this.gen = new RandomGenerator(seedstr);\n        this.width = width;\n        this.height = height;\n        this.canvas2 = document.createElement('canvas');\n        this.c2 = this.canvas2.getContext('2d');\n        this.canvas2.width = width;\n        this.canvas2.height = height;\n        this.matterBodies = [];\n\n\n        this.owner = \"P1\";\n        this.lvl = 5;\n    }\n\n\n\n\n    randomColor() {\n        var r, g, b;\n        if (this.owner === \"P1\") {\n            r = Math.floor(this.gen.random() * 165 + 65).toString(16);\n            g = Math.floor(this.gen.random() * 165 + 65).toString(16);\n            b = Math.floor(this.gen.random() * 165 + 65).toString(16);\n            return \"#\" + r + g + b;\n        }\n        r = Math.floor(this.gen.random() * 165 + 10).toString(16);\n        g = Math.floor(this.gen.random() * 165 + 10).toString(16);\n        b = Math.floor(this.gen.random() * 165 + 10).toString(16);\n        return \"#\" + r + g + b;\n    }\n\n    randomPoints(num) {\n        var points = [];\n        for (var i = 0; i < num; i++) {\n            var x = this.gen.randNumOfRange(0, this.width);\n            var y = this.gen.randNumOfRange(0, this.height);\n            points.push({ x: x, y: y });\n        }\n        // TODO: check if some area is there\n        // let area = UtilFunctions.polygonArea(points);\n        // if (area < 4) {\n        //     console.log(points);\n        //     points = this.randomPoints(num);\n        // }\n        return points;\n    }\n\n\n\n    drawShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else {\n                shape.lineTo(points[i].x, points[i].y);\n            }\n        }\n\n        return shape;\n    }\n\n    drawMirrorShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            var x = this.width - points[i].x;\n            if (i === 0) {\n                shape.moveTo(x, points[i].y);\n            } else {\n                shape.lineTo(x, points[i].y);\n            }\n        }\n        return shape;\n    }\n\n    drawCurvedShape(points) {\n\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else if (i % 2 === 0) {\n                shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y)\n            }\n        }\n        return shape;\n    }\n\n    drawCurvedMirrorShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            var x = this.width - points[i].x;\n            if (i === 0) {\n                shape.moveTo(x, points[i].y);\n            } else if (i % 2 === 0) {\n                var x1 = this.width - points[i - 1].x;\n                var x2 = this.width - points[i].x;\n                shape.quadraticCurveTo(x1, points[i - 1].y, x2, points[i].y)\n            }\n        }\n        return shape;\n    }\n\n\n    // ----------------------------------------------------------------------------------------------------------------\n\n    drawCurvedMirroredPolygon() {\n\n        var pointNumber = this.gen.randNumOfRange(3, this.mapPolygonMaxSize(this.lvl).number);\n        var points = this.randomPoints(pointNumber);\n        //console.log(UtilFunctions.polygonArea(points));\n        var color = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedShape(points));\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedMirrorShape(points));\n    }\n\n    drawMirroredPolygon() {\n\n        var pointNumber = this.gen.randNumOfRange(3, this.mapPolygonMaxSize(this.lvl).number);\n        var points = this.randomPoints(pointNumber);\n        while (UtilFunctions.polygonArea(points) < 6.0) {\n            points = this.randomPoints(pointNumber);\n        }\n\n        var color = this.randomColor();\n\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawShape(points));\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawMirrorShape(points));\n\n\n\n        this.addBodies(points, color);\n        var points2 = points;\n        points2.forEach(p => { p.x = this.width - p.x; });\n        this.addBodies(points2, color);\n    }\n\n    drawCurvedMirroredPolygonColorDiff() {\n\n        var pointNumber = this.gen.randNumOfRange(3, this.mapPolygonMaxSize(this.lvl).number);\n        var points = this.randomPoints(pointNumber);\n        var color = this.randomColor();\n        var color2 = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedShape(points));\n        this.c2.fillStyle = color2;\n        this.c2.fill(this.drawCurvedMirrorShape(points));\n    }\n\n    drawMirroredPolygonColorDiff() {\n\n        var pointNumber = this.gen.randNumOfRange(3, this.mapPolygonMaxSize(this.lvl).number);\n        var points = this.randomPoints(pointNumber);\n        var color = this.randomColor();\n        var color2 = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawShape(points));\n        this.c2.fillStyle = color2;\n        this.c2.fill(this.drawMirrorShape(points));\n\n        this.addBodies(points, color);\n        var points2 = points;\n        points2.forEach(p => { p.x = this.width - p.x; });\n        this.addBodies(points2, color2);\n    }\n\n    //sort points in y direction\n    sortPoints(points) {\n        return points.sort((a, b) => (a.y > b.y) ? 1 : -1);\n    }\n\n    addBodies(points, color) {\n        var pointList = this.sortPoints(points);\n        for (var i = 2; i < pointList.length; i++) {\n            var body = Bodies.fromVertices(0, 0, [points[i - 2], points[i - 1], points[i]]);\n            if (body.vertices.length >= 3) {\n                body.torque = 0.05;\n                this.matterBodies.push({ body: body, color: color, alpha: 1.0 });\n            }\n\n        }\n\n    }\n\n\n    drawPolygons(num) {\n        return [...Array(num).keys()].map(() => this.gen.random() > 0.05 ? this.drawMirroredPolygon() : this.drawMirroredPolygonColorDiff());\n    }\n\n\n    getMatterBodies() {\n        this.drawPolygons(this.gen.randNumOfRange(3, this.mapPolygonMaxSize(this.lvl).corner))\n        return this.matterBodies;\n    }\n\n    drawPieceCanvas(owner, lvl) {\n        this.owner = owner;\n        this.lvl = lvl;\n        ; this.drawPolygons(this.gen.randNumOfRange(3, this.mapPolygonMaxSize(lvl).corner))\n\n\n        return (\n            this.canvas2\n        );\n    }\n\n\n    mapPolygonMaxSize(lvl) {\n        switch (lvl) {\n            case 1:\n                return { corner: 6, number: 3 };\n            case 2:\n                return { corner: 6, number: 3 };\n            case 3:\n                return { corner: 6, number: 4 };\n            case 4:\n                return { corner: 8, number: 4 };\n            case 5:\n                return { corner: 10, number: 5 };\n            default:\n                return { corner: 5, number: 3 };\n        }\n    }\n\n\n}\n\nexport default PieceGenerator"]},"metadata":{},"sourceType":"module"}