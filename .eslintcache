[{"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/index.js":"1","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/App.js":"2","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/reportWebVitals.js":"3","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/header.component.jsx":"4","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/startGame.component.jsx":"5","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/joinGame.component.jsx":"6","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/services/main.service.jsx":"7","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/game.component.jsx":"8","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/services/server.service.jsx":"9","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/piece-card.component.jsx":"10","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/piece.component.jsx":"11","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/pieces.component.jsx":"12","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/tools/piece-data.component.jsx":"13","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/tools/pieces-data.component.jsx":"14","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/piece-generator.jsx":"15","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/random-generator.jsx":"16","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/util-functions.jsx":"17","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/canvas.component.jsx":"18","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/silhouettes/chess-piece-generator.jsx":"19","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/silhouettes/chess-piece.component.jsx":"20","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/silhouettes/chess-pieces.component.jsx":"21"},{"size":546,"mtime":1608644977766,"results":"22","hashOfConfig":"23"},{"size":1755,"mtime":1634336027871,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1608644977766,"results":"25","hashOfConfig":"23"},{"size":1510,"mtime":1634336027875,"results":"26","hashOfConfig":"23"},{"size":1438,"mtime":1615518914937,"results":"27","hashOfConfig":"23"},{"size":1408,"mtime":1615510818642,"results":"28","hashOfConfig":"23"},{"size":1153,"mtime":1634955894561,"results":"29","hashOfConfig":"23"},{"size":12104,"mtime":1634979705610,"results":"30","hashOfConfig":"23"},{"size":311,"mtime":1634955933847,"results":"31","hashOfConfig":"23"},{"size":4455,"mtime":1634336027875,"results":"32","hashOfConfig":"23"},{"size":802,"mtime":1634336027871,"results":"33","hashOfConfig":"23"},{"size":1038,"mtime":1634336027871,"results":"34","hashOfConfig":"23"},{"size":462,"mtime":1634336027875,"results":"35","hashOfConfig":"23"},{"size":1860,"mtime":1634336027875,"results":"36","hashOfConfig":"23"},{"size":5119,"mtime":1634336027871,"results":"37","hashOfConfig":"23"},{"size":813,"mtime":1634336027871,"results":"38","hashOfConfig":"23"},{"size":543,"mtime":1634336027871,"results":"39","hashOfConfig":"23"},{"size":617,"mtime":1634336027871,"results":"40","hashOfConfig":"23"},{"size":3281,"mtime":1634336027871,"results":"41","hashOfConfig":"23"},{"size":832,"mtime":1634336027871,"results":"42","hashOfConfig":"23"},{"size":1068,"mtime":1634336027871,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"2vxp69",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/index.js",[],["92","93"],"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/App.js",[],"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/reportWebVitals.js",[],"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/header.component.jsx",["94"],"import React, { Component } from 'react'\nimport servcerService from '../services/server.service';\n\nclass HeaderComponent extends Component {\n    constructor(props) {\n        super(props)\n        console.log(props);\n        this.state = {\n            gameNumber: 0\n        }\n        this.goHome = this.goHome.bind(this);\n    }\n\n    componentDidMount() {\n        servcerService.getServerData().then((res) => {\n            console.log(res.data);\n            this.setState({ gameNumber: res.data.gameNumber });\n\n        }).catch((err) => console.log(err));\n    }\n\n    goHome() {\n        this.props.history.push('/')\n    }\n\n    render() {\n        const { gameNumber } = this.state;\n\n        return (\n            <div>\n                <header>\n                    <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n\n                        <div ><a onClick={() => this.goHome()} className=\"navbar-brand\">FreeChazz</a></div>\n                        <div><a href=\"piecesymbol\" className=\"navbar-brand\">Piece</a></div>\n                        <div><a href=\"piecesymbols\" className=\"navbar-brand\">Pieces</a></div>\n                        <div><a href=\"chesspiecesymbol\" className=\"navbar-brand\">ChessPiece</a></div>\n                        <div><a href=\"chesspiecessymbol\" className=\"navbar-brand\">ChessPieces</a></div>\n                        <small>Number of Games:{gameNumber}</small>\n                    </nav>\n                </header>\n            </div>\n        )\n    }\n}\n\nexport default HeaderComponent","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/startGame.component.jsx",[],"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/joinGame.component.jsx",[],"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/services/main.service.jsx",[],"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/game.component.jsx",["95"],"import React, { Component } from 'react'\nimport mainService from '../services/main.service';\nimport Canvas from '../components/canvas.component';\nimport PieceGenerator from '../components/generator/piece-generator';\nimport PieceCardComponent from './piece-card.component';\nimport Config from \"./config.json\";\nimport serverConfig from \"../services/server-config.json\";\n\n\nclass GameComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            me: JSON.parse(localStorage.getItem(\"auth\")).player,\n            inviteLink: \"http://\" + serverConfig.host + \":3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n\n            //updater\n            isInited: false,\n\n            //game consts\n            player1: {},\n            player2: {},\n            width: 16,\n            height: 16,\n            pieces: {}, // images of pieces\n\n            // game state\n            boardData: {}, // data from server\n            boardView: {}, // symbol, playertype\n            turn: \"undef\",\n            round: 0,\n            winner: null,\n\n            //selection\n            selectedField: {},\n            possibleMoves: [],\n            pieceId: \"\",\n        }\n        this.selectField = this.selectField.bind(this);\n        this.clickOnCanvas = this.clickOnCanvas.bind(this);\n        this.drawMethod = this.drawMethod.bind(this);\n        this.play = this.play.bind(this);\n        this.loadBoard = this.loadBoard.bind(this);\n        this.loadPieceData = this.loadPieceData.bind(this);\n\n    }\n\n    componentDidMount() {\n        const { isInited } = this.state;\n\n        //Init function \n        if (!isInited) {\n            this.loadPieceData();\n        }\n\n        //start updater\n        const loadTimer = setInterval(() => {\n            this.updateGameData();\n\n        }, Config.updateInterval);\n    }\n\n    //check for ugameupdate\n    updateGameData() {\n        const { gameId, turn } = this.state;\n        mainService.getGameData(gameId).then((res) => {\n\n\n\n            this.setState({ player1: res.data.player1, player2: res.data.player2, turn: res.data.turn, round: res.data.round, winner: res.data.winner });\n            //when other player made his turn\n            if (turn !== res.data.turn) {\n\n                this.loadBoard();\n            }\n\n            //check game end ?\n        });\n    }\n\n\n    // initial creating piece graphics\n    loadPieceData() {\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv = this.createBoard(res.data.board);\n            var pieces = new Map();\n            for (let i = 0; i < bv.length; i++) {\n                for (let j = 0; j < bv[0].length; j++) {\n                    if (bv[i][j].symbol !== \"\" && pieces.get(bv[i][j].symbol) === undefined) {\n                        var pg = new PieceGenerator(Config.squareSize * 0.8, Config.squareSize * 0.95, bv[i][j].symbol);\n                        pieces.set(bv[i][j].symbol, pg.drawPieceCanvas(bv[i][j].owner));\n\n                    }\n                }\n            }\n\n            this.setState({ pieces: pieces, isInited: true, boardView: bv, width: bv[0].length, height: bv.length });\n        });\n    }\n\n    //update Board\n    loadBoard() {\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv = this.createBoard(res.data.board);\n            this.setState({ boardData: res.data, boardView: bv, width: bv[0].length, height: bv.length });\n        });\n    }\n\n\n    // save Board data\n    createBoard(board) {\n        let bv = board;\n        console.log(bv);\n        for (let i = 0; i < bv.length; i++) {\n            for (let j = 0; j < bv[0].length; j++) {\n                if (board[i][j] === null) {\n                    bv[i][j] = {\n                        symbol: \"\",\n                        owner: \"\",\n                        possibleMoves: []\n                    };\n                } else {\n                    bv[i][j] = {\n                        symbol: bv[i][j].symbol,\n                        owner: bv[i][j].owner,\n                        possibleMoves: bv[i][j].possibleMoves\n                    };\n                }\n            }\n        }\n        return bv;\n    }\n\n\n    selectField(x, y) {\n        const { boardView, selectedField, me, turn, possibleMoves } = this.state;\n        const isPlayerTurn = me === turn;\n        const isEmptyField = boardView[y][x].symbol === \"\";\n        const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n        if (sthSelected) {\n            const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n            const isPossibleMove = possibleMoves.some(move => move.x === x && move.y === y);\n            const isOwnSelected = me === boardView[selectedField.y][selectedField.x].owner;\n\n            // move,unselect, another select ?\n\n            if (isAlreadySelected) {\n                // unselect\n                this.setState({\n                    possibleMoves: [],\n                    selectedField: {},\n                    pieceId: \"\"\n                });\n            } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n                // move\n                const draw = { fromPos: { x: selectedField.x, y: selectedField.y }, toPos: { x: x, y: y } }\n                this.play(draw);\n            } else if (isEmptyField) {\n                // unselect\n                this.setState({\n                    possibleMoves: [],\n                    selectedField: {},\n                    pieceId: \"\"\n                });\n            } else {\n                // select new position\n                this.setState({\n                    possibleMoves: boardView[y][x].possibleMoves,\n                    selectedField: { x: x, y: y },\n                    pieceId: boardView[y][x].symbol\n                });\n            }\n        } else {\n            if (!isEmptyField) {\n                // select new position\n                this.setState({\n                    possibleMoves: boardView[y][x].possibleMoves,\n                    selectedField: { x: x, y: y },\n                    pieceId: boardView[y][x].symbol\n                });\n            }\n        }\n    }\n\n    play(draw) {\n        const { gameId, turn, winner } = this.state;\n        if (winner === null) {\n            mainService.play(gameId, draw).then((res) => {\n                //            console.log(\"played\", turn);\n                const nextTurn = (turn === \"P1\") ? \"P2\" : \"P1\";\n                this.setState({\n                    possibleMoves: [],\n                    selectedField: {},\n                    turn: nextTurn\n                });\n\n                this.updateGameData();\n                this.loadBoard();\n            });\n        }\n    }\n\n\n\n\n    clickOnCanvas(event) {\n        const rect = event.target.getBoundingClientRect();\n        const x = event.clientX - rect.left - Config.boardTopx;\n        const y = event.clientY - rect.top - Config.boardTopy;\n        this.selectField((x - x % Config.squareSize) / (Config.squareSize), (y - y % Config.squareSize) / (Config.squareSize));\n    }\n\n    drawMethod() {\n        const { width, height, boardView, possibleMoves, selectedField, me, pieces, isInited, winner } = this.state;\n\n\n        const draw = (ctx, frameCount) => {\n            if (boardView) {\n                const squareSize = Config.squareSize;\n                const boardTopx = Config.boardTopx;\n                const boardTopy = Config.boardTopy;\n\n                ctx.canvas.width = squareSize * (width + 1)\n                ctx.canvas.height = squareSize * (height + 1)\n\n                //draw board\n                for (let i = 0; i < width; i++) {\n                    for (let j = 0; j < height; j++) {\n                        ctx.fillStyle = ((i + j) % 2 === 0) ? \"#D2B48C\" : \"PeachPuff\";\n                        let xOffset = boardTopx + j * squareSize;\n                        let yOffset = boardTopy + i * squareSize;\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n                }\n\n                if (JSON.stringify(selectedField) !== \"{}\") {\n                    // draw moves\n                    ctx.globalAlpha = 0.45;\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"lightgreen\" : \"red\";\n                    for (let k = 0; k < possibleMoves.length; k++) {\n                        let xOffset = boardTopx + possibleMoves[k].x * squareSize;\n                        let yOffset = boardTopy + possibleMoves[k].y * squareSize;\n\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n\n                    //draw selected\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"green\" : \"darkred\";\n                    ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n                    ctx.globalAlpha = 1;\n                }\n\n                // draw pieces\n                if (boardView[0] && isInited) {\n                    ctx.fillStyle = \"black\";\n                    ctx.font = \"20px Arial\";\n                    for (let i = 0; i < width; i++) {\n                        for (let j = 0; j < height; j++) {\n                            if (boardView[j][i].symbol !== \"\") {\n\n                                let xOffset = boardTopx + (i + 0.115) * squareSize;\n                                let yOffset = boardTopy + (j + 0.05) * squareSize;\n                                if (pieces.length !== 0) {\n                                    //  console.log(pieces);\n\n                                    ctx.drawImage(pieces.get(boardView[j][i].symbol), xOffset, yOffset);\n                                }\n                                //}\n\n\n                            }\n                        }\n                    }\n                }\n\n                // draw the border around the chessboard\n                ctx.strokeStyle = \"black\";\n                ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height)\n\n\n                // draw winner\n                if (winner !== null) {\n                    ctx.fillStyle = \"rgba(100,100,100,0.8)\"\n                    ctx.fillRect(boardTopx, boardTopy, squareSize * width, squareSize * height)\n\n                    ctx.fillStyle = \"red\"\n                    ctx.font = '30px serif';\n                    ctx.fillText(winner.name + ' wins!', squareSize * width / 3, squareSize * height / 2);\n                }\n\n            }\n        }\n        return draw;\n\n    }\n\n    drawGameText() {\n        const { me, turn } = this.state;\n        if (me === turn) {\n            return \"Your turn!\";\n        }\n        return \"Wait for opponents turn...\";\n    }\n\n\n    render() {\n        const { inviteLink, player1, player2, round, isInited, winner } = this.state;\n        // console.log(\"pieceId (game component) :\", this.state.pieceId);\n        if (isInited) {\n            return (\n                <div>\n                    <div>{this.drawGameText()} {\" \"} {winner !== null && \"The Winner is\" + winner.name}</div>\n                    <div className=\"row\">\n                        <div class=\"mb-3 mt-5\">\n                            <div className=\"card\">\n                                {this.state.pieceId !== \"\" && <PieceCardComponent pieceId={this.state.pieceId}></PieceCardComponent>}\n                            </div>\n                        </div>\n                        <div class=\"mb-5\">\n                            <Canvas draw={this.drawMethod()} onClick={this.clickOnCanvas} />\n\n                            <div>{inviteLink}</div>\n                            <div>\n                                Player1: {player1 && player1.name} {player2 && <>Player2: {player2.name}</>} {\" round:\"}{round}\n                            </div>\n                        </div>\n                    </div >\n                </div>\n            )\n        }\n        return \"\";\n    }\n}\n\nexport default GameComponent","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/services/server.service.jsx",[],"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/piece-card.component.jsx",[],"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/piece.component.jsx",[],"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/pieces.component.jsx",[],"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/tools/piece-data.component.jsx",[],"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/tools/pieces-data.component.jsx",[],"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/piece-generator.jsx",["96"],"import { Component } from 'react'\nimport RandomGenerator from './random-generator';\nimport UtilFunctions from './util-functions';\n\nclass PieceGenerator extends Component {\n\n    constructor(width, height, seedstr) {\n        super();\n        this.gen = new RandomGenerator(seedstr);\n        this.width = width;\n        this.height = height;\n        this.canvas2 = document.createElement('canvas');\n        this.c2 = this.canvas2.getContext('2d');\n        this.canvas2.width = width;\n        this.canvas2.height = height;\n    }\n\n\n\n\n    randomColor() {\n        var r = Math.floor(this.gen.random() * 230).toString(16);\n        var g = Math.floor(this.gen.random() * 230).toString(16);\n        var b = Math.floor(this.gen.random() * 230).toString(16);\n        return \"#\" + r + g + b;\n    }\n\n    randomPoints(num) {\n        var points = [];\n        for (var i = 0; i < num; i++) {\n            var x = this.gen.randNumOfRange(0, this.width);\n            var y = this.gen.randNumOfRange(0, this.height);\n            points.push({ x: x, y: y });\n        }\n        return points;\n    }\n\n\n\n    drawShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else {\n                shape.lineTo(points[i].x, points[i].y);\n            }\n        }\n\n        return shape;\n    }\n\n    drawMirrorShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            var x = this.width - points[i].x;\n            if (i === 0) {\n                shape.moveTo(x, points[i].y);\n            } else {\n                shape.lineTo(x, points[i].y);\n            }\n        }\n        return shape;\n    }\n\n    drawCurvedShape(points) {\n\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else if (i % 2 === 0) {\n                shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y)\n            }\n        }\n        return shape;\n    }\n\n    drawCurvedMirrorShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            var x = this.width - points[i].x;\n            if (i === 0) {\n                shape.moveTo(x, points[i].y);\n            } else if (i % 2 === 0) {\n                var x1 = this.width - points[i - 1].x;\n                var x2 = this.width - points[i].x;\n                shape.quadraticCurveTo(x1, points[i - 1].y, x2, points[i].y)\n            }\n        }\n        return shape;\n    }\n\n\n    // ----------------------------------------------------------------------------------------------------------------\n\n    drawCurvedMirroredPolygon() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        //console.log(UtilFunctions.polygonArea(points));\n        var color = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedShape(points));\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedMirrorShape(points));\n    }\n\n    drawMirroredPolygon() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        //console.log(UtilFunctions.polygonArea(points));\n        var color = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawShape(points));\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawMirrorShape(points));\n    }\n\n    drawCurvedMirroredPolygonColorDiff() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        var color = this.randomColor();\n        var color2 = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedShape(points));\n        this.c2.fillStyle = color2;\n        this.c2.fill(this.drawCurvedMirrorShape(points));\n    }\n\n    drawMirroredPolygonColorDiff() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        var color = this.randomColor();\n        var color2 = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawShape(points));\n        this.c2.fillStyle = color2;\n        this.c2.fill(this.drawMirrorShape(points));\n    }\n\n\n    drawPolygons(num) {\n        return [...Array(num).keys()].map(() => this.gen.random() > 0.1 ? this.drawMirroredPolygon() : this.drawMirroredPolygonColorDiff());\n    }\n\n\n\n    drawPieceCanvas(owner) {\n\n        this.drawPolygons(this.gen.randNumOfRange(3, 5));\n        // this.drawMirroredPolygon();\n        // this.drawMirroredPolygonColorDiff();\n        // this.drawMirroredPolygon();\n        // //this.drawMirroredPolygon();\n        // //        this.drawMirroredPolygonColorDiff();\n        // //this.drawMirroredPolygon();\n        // this.drawMirroredPolygon();\n\n        return (\n            this.canvas2\n        );\n    }\n\n\n\n\n}\n\nexport default PieceGenerator","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/random-generator.jsx",[],["97","98"],"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/util-functions.jsx",[],"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/canvas.component.jsx",[],"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/silhouettes/chess-piece-generator.jsx",["99","100","101","102","103"],"import { Component } from 'react'\nimport RandomGenerator from '../random-generator';\nimport UtilFunctions from '../util-functions';\n\n\n\n/**\n * Piece Generator for black and white design as silhouettes\n */\nclass ChessPieceGenerator extends Component {\n\n    constructor(width, height, seedstr) {\n        super();\n        this.gen = new RandomGenerator(seedstr);\n        this.width = width;\n        this.height = height;\n        this.canvas2 = document.createElement('canvas');\n        this.c2 = this.canvas2.getContext('2d');\n        this.canvas2.width = width;\n        this.canvas2.height = height;\n        this.leftBorder = this.width / 3;\n        this.rightBorder = 2 * this.width / 3;\n    }\n\n\n\n\n    randomColor() {\n        var r = Math.floor(this.gen.random() * 230).toString(16);\n        var g = Math.floor(this.gen.random() * 230).toString(16);\n        var b = Math.floor(this.gen.random() * 230).toString(16);\n        return \"#\" + r + g + b;\n    }\n\n    randomPointsLeft(num) {\n        var points = [];\n        var ys = [];\n        for (var i = 0; i < num; i++) {\n            var y = this.gen.randNumOfRange(0, this.height);\n            ys.push(y);\n        }\n        ys.sort((a, b) => a - b);\n        for (var i = 0; i < num; i++) {\n            var x = this.gen.randNumOfRange(0, this.leftBorder);\n            points.push({ x: x, y: ys[i] });\n        }\n        console.log(points);\n        return points;\n    }\n\n\n\n\n    drawSilhouette(points) {\n\n\n        var pointNumber = this.gen.randNumOfRange(8, 13);\n        var points = this.randomPointsLeft(pointNumber);\n        var color = this.randomColor();\n        this.c2.fillStyle = color;\n\n        var shape = new Path2D();\n        for (var i = 0; i < points.length - 1; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else if (i % 2 === 0) {\n                shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y)\n            }\n        }\n        shape.lineTo(points[points.length - 1].x, points[points.length - 1].y);\n        for (var i = points.length - 1; i > 1; i--) {\n            if (i === points.length - 1) {\n                shape.lineTo(this.rightBorder - points[i].x, points[i].y);\n            } else if (i % 2 === 0) {\n                shape.quadraticCurveTo(this.rightBorder - points[i + 1].x, points[i + 1].y, this.rightBorder - points[i].x, points[i].y)\n            }\n        }\n        shape.lineTo(this.rightBorder - points[1].x, points[1].y);\n        shape.lineTo(points[0].x, points[0].y);\n        this.c2.fill(shape);\n    }\n\n\n\n    drawSilhouettes(num) {\n        return [...Array(num).keys()].map(() => this.drawSilhouette());\n    }\n\n\n\n    drawPieceCanvas(owner) {\n        if (owner == \"P1\") {\n            this.drawSilhouette();\n            this.drawSilhouette();\n        } else {\n            this.drawSilhouette();\n        }\n\n        // this.drawMirroredPolygon();\n        // this.drawMirroredPolygonColorDiff();\n        // this.drawMirroredPolygon();\n        // //this.drawMirroredPolygon();\n        // //        this.drawMirroredPolygonColorDiff();\n        // //this.drawMirroredPolygon();\n        // this.drawMirroredPolygon();\n\n        return (\n            this.canvas2\n        );\n    }\n\n\n\n\n}\n\nexport default ChessPieceGenerator","/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/silhouettes/chess-piece.component.jsx",[],"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/silhouettes/chess-pieces.component.jsx",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":34,"column":31,"nodeType":"110","endLine":34,"endColumn":89},{"ruleId":"111","severity":1,"message":"112","line":59,"column":15,"nodeType":"113","messageId":"114","endLine":59,"endColumn":24},{"ruleId":"111","severity":1,"message":"115","line":3,"column":8,"nodeType":"113","messageId":"114","endLine":3,"endColumn":21},{"ruleId":"104","replacedBy":"116"},{"ruleId":"106","replacedBy":"117"},{"ruleId":"111","severity":1,"message":"115","line":3,"column":8,"nodeType":"113","messageId":"114","endLine":3,"endColumn":21},{"ruleId":"118","severity":1,"message":"119","line":43,"column":18,"nodeType":"113","messageId":"120","endLine":43,"endColumn":19},{"ruleId":"118","severity":1,"message":"121","line":58,"column":13,"nodeType":"113","messageId":"120","endLine":58,"endColumn":19},{"ruleId":"118","severity":1,"message":"119","line":71,"column":18,"nodeType":"113","messageId":"120","endLine":71,"endColumn":19},{"ruleId":"122","severity":1,"message":"123","line":92,"column":19,"nodeType":"124","messageId":"125","endLine":92,"endColumn":21},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'loadTimer' is assigned a value but never used.","Identifier","unusedVar","'UtilFunctions' is defined but never used.",["126"],["127"],"no-redeclare","'i' is already defined.","redeclared","'points' is already defined.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]